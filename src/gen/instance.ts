/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: instance.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./types";
import * as grpc_1 from "@grpc/grpc-js";
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedInstanceService {
    static definition = {
        create: {
            path: "/maarpc.Instance/create",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.IdRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.IdRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.HandleResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.HandleResponse.deserialize(new Uint8Array(bytes))
        },
        destroy: {
            path: "/maarpc.Instance/destroy",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        register_custom_recognizer: {
            path: "/maarpc.Instance/register_custom_recognizer",
            requestStream: true,
            responseStream: true,
            requestSerialize: (message: dependency_1.CustomRecognizerRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.CustomRecognizerRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.CustomRecognizerResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.CustomRecognizerResponse.deserialize(new Uint8Array(bytes))
        },
        unregister_custom_recognizer: {
            path: "/maarpc.Instance/unregister_custom_recognizer",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleStringRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleStringRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        clear_custom_recognizer: {
            path: "/maarpc.Instance/clear_custom_recognizer",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        register_custom_action: {
            path: "/maarpc.Instance/register_custom_action",
            requestStream: true,
            responseStream: true,
            requestSerialize: (message: dependency_1.CustomActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.CustomActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.CustomActionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.CustomActionResponse.deserialize(new Uint8Array(bytes))
        },
        unregister_custom_action: {
            path: "/maarpc.Instance/unregister_custom_action",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleStringRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleStringRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        clear_custom_action: {
            path: "/maarpc.Instance/clear_custom_action",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        bind_resource: {
            path: "/maarpc.Instance/bind_resource",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleHandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleHandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        bind_controller: {
            path: "/maarpc.Instance/bind_controller",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleHandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleHandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        inited: {
            path: "/maarpc.Instance/inited",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.BoolResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.BoolResponse.deserialize(new Uint8Array(bytes))
        },
        post_task: {
            path: "/maarpc.Instance/post_task",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.InstancePostTaskRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.InstancePostTaskRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.IIdResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.IIdResponse.deserialize(new Uint8Array(bytes))
        },
        set_task_param: {
            path: "/maarpc.Instance/set_task_param",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.InstanceSetTaskParamRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.InstanceSetTaskParamRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        status: {
            path: "/maarpc.Instance/status",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleIIdRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleIIdRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.StatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.StatusResponse.deserialize(new Uint8Array(bytes))
        },
        wait: {
            path: "/maarpc.Instance/wait",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleIIdRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleIIdRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.StatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.StatusResponse.deserialize(new Uint8Array(bytes))
        },
        all_finished: {
            path: "/maarpc.Instance/all_finished",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.BoolResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.BoolResponse.deserialize(new Uint8Array(bytes))
        },
        stop: {
            path: "/maarpc.Instance/stop",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        resource: {
            path: "/maarpc.Instance/resource",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes))
        },
        controller: {
            path: "/maarpc.Instance/controller",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract create(call: grpc_1.ServerUnaryCall<dependency_1.IdRequest, dependency_1.HandleResponse>, callback: grpc_1.sendUnaryData<dependency_1.HandleResponse>): void;
    abstract destroy(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract register_custom_recognizer(call: grpc_1.ServerDuplexStream<dependency_1.CustomRecognizerRequest, dependency_1.CustomRecognizerResponse>): void;
    abstract unregister_custom_recognizer(call: grpc_1.ServerUnaryCall<dependency_1.HandleStringRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract clear_custom_recognizer(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract register_custom_action(call: grpc_1.ServerDuplexStream<dependency_1.CustomActionRequest, dependency_1.CustomActionResponse>): void;
    abstract unregister_custom_action(call: grpc_1.ServerUnaryCall<dependency_1.HandleStringRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract clear_custom_action(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract bind_resource(call: grpc_1.ServerUnaryCall<dependency_1.HandleHandleRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract bind_controller(call: grpc_1.ServerUnaryCall<dependency_1.HandleHandleRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract inited(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.BoolResponse>, callback: grpc_1.sendUnaryData<dependency_1.BoolResponse>): void;
    abstract post_task(call: grpc_1.ServerUnaryCall<dependency_1.InstancePostTaskRequest, dependency_1.IIdResponse>, callback: grpc_1.sendUnaryData<dependency_1.IIdResponse>): void;
    abstract set_task_param(call: grpc_1.ServerUnaryCall<dependency_1.InstanceSetTaskParamRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract status(call: grpc_1.ServerUnaryCall<dependency_1.HandleIIdRequest, dependency_1.StatusResponse>, callback: grpc_1.sendUnaryData<dependency_1.StatusResponse>): void;
    abstract wait(call: grpc_1.ServerUnaryCall<dependency_1.HandleIIdRequest, dependency_1.StatusResponse>, callback: grpc_1.sendUnaryData<dependency_1.StatusResponse>): void;
    abstract all_finished(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.BoolResponse>, callback: grpc_1.sendUnaryData<dependency_1.BoolResponse>): void;
    abstract stop(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract resource(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.HandleRequest>, callback: grpc_1.sendUnaryData<dependency_1.HandleRequest>): void;
    abstract controller(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.HandleRequest>, callback: grpc_1.sendUnaryData<dependency_1.HandleRequest>): void;
}
export class InstanceClient extends grpc_1.makeGenericClientConstructor(UnimplementedInstanceService.definition, "Instance", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    create: GrpcPromiseServiceInterface<dependency_1.IdRequest, dependency_1.HandleResponse> = (message: dependency_1.IdRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.HandleResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.create(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.HandleResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    destroy: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.destroy(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    register_custom_recognizer: GrpcChunkServiceInterface<dependency_1.CustomRecognizerRequest, dependency_1.CustomRecognizerResponse> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<dependency_1.CustomRecognizerRequest, dependency_1.CustomRecognizerResponse> => {
        return super.register_custom_recognizer(metadata, options);
    };
    unregister_custom_recognizer: GrpcPromiseServiceInterface<dependency_1.HandleStringRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleStringRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.unregister_custom_recognizer(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    clear_custom_recognizer: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.clear_custom_recognizer(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    register_custom_action: GrpcChunkServiceInterface<dependency_1.CustomActionRequest, dependency_1.CustomActionResponse> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<dependency_1.CustomActionRequest, dependency_1.CustomActionResponse> => {
        return super.register_custom_action(metadata, options);
    };
    unregister_custom_action: GrpcPromiseServiceInterface<dependency_1.HandleStringRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleStringRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.unregister_custom_action(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    clear_custom_action: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.clear_custom_action(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    bind_resource: GrpcPromiseServiceInterface<dependency_1.HandleHandleRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleHandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.bind_resource(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    bind_controller: GrpcPromiseServiceInterface<dependency_1.HandleHandleRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleHandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.bind_controller(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    inited: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.BoolResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.BoolResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.inited(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.BoolResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    post_task: GrpcPromiseServiceInterface<dependency_1.InstancePostTaskRequest, dependency_1.IIdResponse> = (message: dependency_1.InstancePostTaskRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.IIdResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.post_task(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.IIdResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    set_task_param: GrpcPromiseServiceInterface<dependency_1.InstanceSetTaskParamRequest, dependency_1.EmptyResponse> = (message: dependency_1.InstanceSetTaskParamRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.set_task_param(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    status: GrpcPromiseServiceInterface<dependency_1.HandleIIdRequest, dependency_1.StatusResponse> = (message: dependency_1.HandleIIdRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.StatusResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.status(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.StatusResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    wait: GrpcPromiseServiceInterface<dependency_1.HandleIIdRequest, dependency_1.StatusResponse> = (message: dependency_1.HandleIIdRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.StatusResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.wait(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.StatusResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    all_finished: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.BoolResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.BoolResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.all_finished(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.BoolResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    stop: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.stop(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    resource: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.HandleRequest> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.HandleRequest> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.resource(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.HandleRequest) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    controller: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.HandleRequest> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.HandleRequest> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.controller(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.HandleRequest) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}

/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: sync.context.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./types";
import * as grpc_1 from "@grpc/grpc-js";
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedSyncContextService {
    static definition = {
        run_task: {
            path: "/maarpc.SyncContext/run_task",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.SyncContextRunTaskRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.SyncContextRunTaskRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        run_recognizer: {
            path: "/maarpc.SyncContext/run_recognizer",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.SyncContextRunRecognizerRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.SyncContextRunRecognizerRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.SyncContextRunRecognizerResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.SyncContextRunRecognizerResponse.deserialize(new Uint8Array(bytes))
        },
        run_action: {
            path: "/maarpc.SyncContext/run_action",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.SyncContextRunActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.SyncContextRunActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        click: {
            path: "/maarpc.SyncContext/click",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.SyncContextClickRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.SyncContextClickRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyRequest) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyRequest.deserialize(new Uint8Array(bytes))
        },
        swipe: {
            path: "/maarpc.SyncContext/swipe",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.SyncContextSwipeRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.SyncContextSwipeRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyRequest) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyRequest.deserialize(new Uint8Array(bytes))
        },
        key: {
            path: "/maarpc.SyncContext/key",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.SyncContextKeyRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.SyncContextKeyRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyRequest) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyRequest.deserialize(new Uint8Array(bytes))
        },
        touch_down: {
            path: "/maarpc.SyncContext/touch_down",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.SyncContextTouchRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.SyncContextTouchRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyRequest) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyRequest.deserialize(new Uint8Array(bytes))
        },
        touch_move: {
            path: "/maarpc.SyncContext/touch_move",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.SyncContextTouchRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.SyncContextTouchRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyRequest) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyRequest.deserialize(new Uint8Array(bytes))
        },
        touch_up: {
            path: "/maarpc.SyncContext/touch_up",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.SyncContextTouchRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.SyncContextTouchRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyRequest) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyRequest.deserialize(new Uint8Array(bytes))
        },
        screencap: {
            path: "/maarpc.SyncContext/screencap",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.SyncContextScreencapRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.SyncContextScreencapRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        task_result: {
            path: "/maarpc.SyncContext/task_result",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleStringRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleStringRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.StringResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.StringResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract run_task(call: grpc_1.ServerUnaryCall<dependency_1.SyncContextRunTaskRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract run_recognizer(call: grpc_1.ServerUnaryCall<dependency_1.SyncContextRunRecognizerRequest, dependency_1.SyncContextRunRecognizerResponse>, callback: grpc_1.sendUnaryData<dependency_1.SyncContextRunRecognizerResponse>): void;
    abstract run_action(call: grpc_1.ServerUnaryCall<dependency_1.SyncContextRunActionRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract click(call: grpc_1.ServerUnaryCall<dependency_1.SyncContextClickRequest, dependency_1.EmptyRequest>, callback: grpc_1.sendUnaryData<dependency_1.EmptyRequest>): void;
    abstract swipe(call: grpc_1.ServerUnaryCall<dependency_1.SyncContextSwipeRequest, dependency_1.EmptyRequest>, callback: grpc_1.sendUnaryData<dependency_1.EmptyRequest>): void;
    abstract key(call: grpc_1.ServerUnaryCall<dependency_1.SyncContextKeyRequest, dependency_1.EmptyRequest>, callback: grpc_1.sendUnaryData<dependency_1.EmptyRequest>): void;
    abstract touch_down(call: grpc_1.ServerUnaryCall<dependency_1.SyncContextTouchRequest, dependency_1.EmptyRequest>, callback: grpc_1.sendUnaryData<dependency_1.EmptyRequest>): void;
    abstract touch_move(call: grpc_1.ServerUnaryCall<dependency_1.SyncContextTouchRequest, dependency_1.EmptyRequest>, callback: grpc_1.sendUnaryData<dependency_1.EmptyRequest>): void;
    abstract touch_up(call: grpc_1.ServerUnaryCall<dependency_1.SyncContextTouchRequest, dependency_1.EmptyRequest>, callback: grpc_1.sendUnaryData<dependency_1.EmptyRequest>): void;
    abstract screencap(call: grpc_1.ServerUnaryCall<dependency_1.SyncContextScreencapRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract task_result(call: grpc_1.ServerUnaryCall<dependency_1.HandleStringRequest, dependency_1.StringResponse>, callback: grpc_1.sendUnaryData<dependency_1.StringResponse>): void;
}
export class SyncContextClient extends grpc_1.makeGenericClientConstructor(UnimplementedSyncContextService.definition, "SyncContext", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    run_task: GrpcPromiseServiceInterface<dependency_1.SyncContextRunTaskRequest, dependency_1.EmptyResponse> = (message: dependency_1.SyncContextRunTaskRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.run_task(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    run_recognizer: GrpcPromiseServiceInterface<dependency_1.SyncContextRunRecognizerRequest, dependency_1.SyncContextRunRecognizerResponse> = (message: dependency_1.SyncContextRunRecognizerRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.SyncContextRunRecognizerResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.run_recognizer(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.SyncContextRunRecognizerResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    run_action: GrpcPromiseServiceInterface<dependency_1.SyncContextRunActionRequest, dependency_1.EmptyResponse> = (message: dependency_1.SyncContextRunActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.run_action(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    click: GrpcPromiseServiceInterface<dependency_1.SyncContextClickRequest, dependency_1.EmptyRequest> = (message: dependency_1.SyncContextClickRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyRequest> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.click(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyRequest) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    swipe: GrpcPromiseServiceInterface<dependency_1.SyncContextSwipeRequest, dependency_1.EmptyRequest> = (message: dependency_1.SyncContextSwipeRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyRequest> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.swipe(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyRequest) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    key: GrpcPromiseServiceInterface<dependency_1.SyncContextKeyRequest, dependency_1.EmptyRequest> = (message: dependency_1.SyncContextKeyRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyRequest> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.key(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyRequest) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    touch_down: GrpcPromiseServiceInterface<dependency_1.SyncContextTouchRequest, dependency_1.EmptyRequest> = (message: dependency_1.SyncContextTouchRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyRequest> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.touch_down(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyRequest) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    touch_move: GrpcPromiseServiceInterface<dependency_1.SyncContextTouchRequest, dependency_1.EmptyRequest> = (message: dependency_1.SyncContextTouchRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyRequest> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.touch_move(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyRequest) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    touch_up: GrpcPromiseServiceInterface<dependency_1.SyncContextTouchRequest, dependency_1.EmptyRequest> = (message: dependency_1.SyncContextTouchRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyRequest> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.touch_up(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyRequest) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    screencap: GrpcPromiseServiceInterface<dependency_1.SyncContextScreencapRequest, dependency_1.EmptyResponse> = (message: dependency_1.SyncContextScreencapRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.screencap(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    task_result: GrpcPromiseServiceInterface<dependency_1.HandleStringRequest, dependency_1.StringResponse> = (message: dependency_1.HandleStringRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.StringResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.task_result(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.StringResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}

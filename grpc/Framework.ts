/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: Framework.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./Types";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class SetGlobalOptionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        logging?: string;
        debug_mode?: never;
    } | {
        logging?: never;
        debug_mode?: boolean;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("logging" in data && data.logging != undefined) {
                this.logging = data.logging;
            }
            if ("debug_mode" in data && data.debug_mode != undefined) {
                this.debug_mode = data.debug_mode;
            }
        }
    }
    get logging() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set logging(value: string) {
        pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get has_logging() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get debug_mode() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set debug_mode(value: boolean) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_debug_mode() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get option() {
        const cases: {
            [index: number]: "none" | "logging" | "debug_mode";
        } = {
            0: "none",
            1: "logging",
            2: "debug_mode"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        logging?: string;
        debug_mode?: boolean;
    }): SetGlobalOptionRequest {
        const message = new SetGlobalOptionRequest({});
        if (data.logging != null) {
            message.logging = data.logging;
        }
        if (data.debug_mode != null) {
            message.debug_mode = data.debug_mode;
        }
        return message;
    }
    toObject() {
        const data: {
            logging?: string;
            debug_mode?: boolean;
        } = {};
        if (this.logging != null) {
            data.logging = this.logging;
        }
        if (this.debug_mode != null) {
            data.debug_mode = this.debug_mode;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_logging)
            writer.writeString(1, this.logging);
        if (this.has_debug_mode)
            writer.writeBool(2, this.debug_mode);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetGlobalOptionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetGlobalOptionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.logging = reader.readString();
                    break;
                case 2:
                    message.debug_mode = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SetGlobalOptionRequest {
        return SetGlobalOptionRequest.deserialize(bytes);
    }
}
export class ImageInfoResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2]];
    constructor(data?: any[] | ({} & (({
        type?: number;
    }) | ({
        size?: dependency_1.Size;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("size" in data && data.size != undefined) {
                this.size = data.size;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set type(value: number) {
        pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get has_type() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get size() {
        return pb_1.Message.getWrapperField(this, dependency_1.Size, 2) as dependency_1.Size;
    }
    set size(value: dependency_1.Size) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get has_size() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _type() {
        const cases: {
            [index: number]: "none" | "type";
        } = {
            0: "none",
            1: "type"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _size() {
        const cases: {
            [index: number]: "none" | "size";
        } = {
            0: "none",
            2: "size"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        type?: number;
        size?: ReturnType<typeof dependency_1.Size.prototype.toObject>;
    }): ImageInfoResponse {
        const message = new ImageInfoResponse({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.size != null) {
            message.size = dependency_1.Size.fromObject(data.size);
        }
        return message;
    }
    toObject() {
        const data: {
            type?: number;
            size?: ReturnType<typeof dependency_1.Size.prototype.toObject>;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.size != null) {
            data.size = this.size.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_type)
            writer.writeInt32(1, this.type);
        if (this.has_size)
            writer.writeMessage(2, this.size, () => this.size.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ImageInfoResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ImageInfoResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readInt32();
                    break;
                case 2:
                    reader.readMessage(message.size, () => message.size = dependency_1.Size.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ImageInfoResponse {
        return ImageInfoResponse.deserialize(bytes);
    }
}
export class AdbControllerRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2], [3], [4], [5]];
    constructor(data?: any[] | ({} & (({
        callback?: dependency_1.Id;
    }) | ({
        adb_path?: string;
    }) | ({
        adb_serial?: string;
    }) | ({
        adb_type?: number;
    }) | ({
        adb_config?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("callback" in data && data.callback != undefined) {
                this.callback = data.callback;
            }
            if ("adb_path" in data && data.adb_path != undefined) {
                this.adb_path = data.adb_path;
            }
            if ("adb_serial" in data && data.adb_serial != undefined) {
                this.adb_serial = data.adb_serial;
            }
            if ("adb_type" in data && data.adb_type != undefined) {
                this.adb_type = data.adb_type;
            }
            if ("adb_config" in data && data.adb_config != undefined) {
                this.adb_config = data.adb_config;
            }
        }
    }
    get callback() {
        return pb_1.Message.getWrapperField(this, dependency_1.Id, 1) as dependency_1.Id;
    }
    set callback(value: dependency_1.Id) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_callback() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get adb_path() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set adb_path(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
    }
    get has_adb_path() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get adb_serial() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set adb_serial(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
    }
    get has_adb_serial() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get adb_type() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set adb_type(value: number) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[3], value);
    }
    get has_adb_type() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get adb_config() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set adb_config(value: string) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[4], value);
    }
    get has_adb_config() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get _callback() {
        const cases: {
            [index: number]: "none" | "callback";
        } = {
            0: "none",
            1: "callback"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _adb_path() {
        const cases: {
            [index: number]: "none" | "adb_path";
        } = {
            0: "none",
            2: "adb_path"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _adb_serial() {
        const cases: {
            [index: number]: "none" | "adb_serial";
        } = {
            0: "none",
            3: "adb_serial"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get _adb_type() {
        const cases: {
            [index: number]: "none" | "adb_type";
        } = {
            0: "none",
            4: "adb_type"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get _adb_config() {
        const cases: {
            [index: number]: "none" | "adb_config";
        } = {
            0: "none",
            5: "adb_config"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    static fromObject(data: {
        callback?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
        adb_path?: string;
        adb_serial?: string;
        adb_type?: number;
        adb_config?: string;
    }): AdbControllerRequest {
        const message = new AdbControllerRequest({});
        if (data.callback != null) {
            message.callback = dependency_1.Id.fromObject(data.callback);
        }
        if (data.adb_path != null) {
            message.adb_path = data.adb_path;
        }
        if (data.adb_serial != null) {
            message.adb_serial = data.adb_serial;
        }
        if (data.adb_type != null) {
            message.adb_type = data.adb_type;
        }
        if (data.adb_config != null) {
            message.adb_config = data.adb_config;
        }
        return message;
    }
    toObject() {
        const data: {
            callback?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
            adb_path?: string;
            adb_serial?: string;
            adb_type?: number;
            adb_config?: string;
        } = {};
        if (this.callback != null) {
            data.callback = this.callback.toObject();
        }
        if (this.adb_path != null) {
            data.adb_path = this.adb_path;
        }
        if (this.adb_serial != null) {
            data.adb_serial = this.adb_serial;
        }
        if (this.adb_type != null) {
            data.adb_type = this.adb_type;
        }
        if (this.adb_config != null) {
            data.adb_config = this.adb_config;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_callback)
            writer.writeMessage(1, this.callback, () => this.callback.serialize(writer));
        if (this.has_adb_path)
            writer.writeString(2, this.adb_path);
        if (this.has_adb_serial)
            writer.writeString(3, this.adb_serial);
        if (this.has_adb_type)
            writer.writeUint32(4, this.adb_type);
        if (this.has_adb_config)
            writer.writeString(5, this.adb_config);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdbControllerRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdbControllerRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.callback, () => message.callback = dependency_1.Id.deserialize(reader));
                    break;
                case 2:
                    message.adb_path = reader.readString();
                    break;
                case 3:
                    message.adb_serial = reader.readString();
                    break;
                case 4:
                    message.adb_type = reader.readUint32();
                    break;
                case 5:
                    message.adb_config = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AdbControllerRequest {
        return AdbControllerRequest.deserialize(bytes);
    }
}
export class CustomControllerRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2]];
    constructor(data?: any[] | ({} & (({
        callback?: dependency_1.Id;
    }) | ({
        ctrl?: dependency_1.Id;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("callback" in data && data.callback != undefined) {
                this.callback = data.callback;
            }
            if ("ctrl" in data && data.ctrl != undefined) {
                this.ctrl = data.ctrl;
            }
        }
    }
    get callback() {
        return pb_1.Message.getWrapperField(this, dependency_1.Id, 1) as dependency_1.Id;
    }
    set callback(value: dependency_1.Id) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_callback() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get ctrl() {
        return pb_1.Message.getWrapperField(this, dependency_1.Id, 2) as dependency_1.Id;
    }
    set ctrl(value: dependency_1.Id) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get has_ctrl() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _callback() {
        const cases: {
            [index: number]: "none" | "callback";
        } = {
            0: "none",
            1: "callback"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _ctrl() {
        const cases: {
            [index: number]: "none" | "ctrl";
        } = {
            0: "none",
            2: "ctrl"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        callback?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
        ctrl?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
    }): CustomControllerRequest {
        const message = new CustomControllerRequest({});
        if (data.callback != null) {
            message.callback = dependency_1.Id.fromObject(data.callback);
        }
        if (data.ctrl != null) {
            message.ctrl = dependency_1.Id.fromObject(data.ctrl);
        }
        return message;
    }
    toObject() {
        const data: {
            callback?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
            ctrl?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
        } = {};
        if (this.callback != null) {
            data.callback = this.callback.toObject();
        }
        if (this.ctrl != null) {
            data.ctrl = this.ctrl.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_callback)
            writer.writeMessage(1, this.callback, () => this.callback.serialize(writer));
        if (this.has_ctrl)
            writer.writeMessage(2, this.ctrl, () => this.ctrl.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomControllerRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomControllerRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.callback, () => message.callback = dependency_1.Id.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.ctrl, () => message.ctrl = dependency_1.Id.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CustomControllerRequest {
        return CustomControllerRequest.deserialize(bytes);
    }
}
export class CustomControllerSetOptionParam extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2]];
    constructor(data?: any[] | ({} & (({
        key?: number;
    }) | ({
        value?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set key(value: number) {
        pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get has_key() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
    }
    get has_value() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _key() {
        const cases: {
            [index: number]: "none" | "key";
        } = {
            0: "none",
            1: "key"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _value() {
        const cases: {
            [index: number]: "none" | "value";
        } = {
            0: "none",
            2: "value"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        key?: number;
        value?: string;
    }): CustomControllerSetOptionParam {
        const message = new CustomControllerSetOptionParam({});
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            key?: number;
            value?: string;
        } = {};
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_key)
            writer.writeInt32(1, this.key);
        if (this.has_value)
            writer.writeString(2, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomControllerSetOptionParam {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomControllerSetOptionParam();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.key = reader.readInt32();
                    break;
                case 2:
                    message.value = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CustomControllerSetOptionParam {
        return CustomControllerSetOptionParam.deserialize(bytes);
    }
}
export class CustomControllerResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 200], [1], [2]];
    constructor(data?: any[] | ({} & (({
        connect?: boolean;
        click?: never;
        swipe?: never;
        key?: never;
        touch_down?: never;
        touch_move?: never;
        touch_up?: never;
        start?: never;
        stop?: never;
        resolution?: never;
        image?: never;
        uuid?: never;
        set_option?: never;
    } | {
        connect?: never;
        click?: dependency_1.ClickParam;
        swipe?: never;
        key?: never;
        touch_down?: never;
        touch_move?: never;
        touch_up?: never;
        start?: never;
        stop?: never;
        resolution?: never;
        image?: never;
        uuid?: never;
        set_option?: never;
    } | {
        connect?: never;
        click?: never;
        swipe?: dependency_1.SwipeParam;
        key?: never;
        touch_down?: never;
        touch_move?: never;
        touch_up?: never;
        start?: never;
        stop?: never;
        resolution?: never;
        image?: never;
        uuid?: never;
        set_option?: never;
    } | {
        connect?: never;
        click?: never;
        swipe?: never;
        key?: dependency_1.KeyParam;
        touch_down?: never;
        touch_move?: never;
        touch_up?: never;
        start?: never;
        stop?: never;
        resolution?: never;
        image?: never;
        uuid?: never;
        set_option?: never;
    } | {
        connect?: never;
        click?: never;
        swipe?: never;
        key?: never;
        touch_down?: dependency_1.TouchParam;
        touch_move?: never;
        touch_up?: never;
        start?: never;
        stop?: never;
        resolution?: never;
        image?: never;
        uuid?: never;
        set_option?: never;
    } | {
        connect?: never;
        click?: never;
        swipe?: never;
        key?: never;
        touch_down?: never;
        touch_move?: dependency_1.TouchParam;
        touch_up?: never;
        start?: never;
        stop?: never;
        resolution?: never;
        image?: never;
        uuid?: never;
        set_option?: never;
    } | {
        connect?: never;
        click?: never;
        swipe?: never;
        key?: never;
        touch_down?: never;
        touch_move?: never;
        touch_up?: dependency_1.TouchParam;
        start?: never;
        stop?: never;
        resolution?: never;
        image?: never;
        uuid?: never;
        set_option?: never;
    } | {
        connect?: never;
        click?: never;
        swipe?: never;
        key?: never;
        touch_down?: never;
        touch_move?: never;
        touch_up?: never;
        start?: string;
        stop?: never;
        resolution?: never;
        image?: never;
        uuid?: never;
        set_option?: never;
    } | {
        connect?: never;
        click?: never;
        swipe?: never;
        key?: never;
        touch_down?: never;
        touch_move?: never;
        touch_up?: never;
        start?: never;
        stop?: string;
        resolution?: never;
        image?: never;
        uuid?: never;
        set_option?: never;
    } | {
        connect?: never;
        click?: never;
        swipe?: never;
        key?: never;
        touch_down?: never;
        touch_move?: never;
        touch_up?: never;
        start?: never;
        stop?: never;
        resolution?: boolean;
        image?: never;
        uuid?: never;
        set_option?: never;
    } | {
        connect?: never;
        click?: never;
        swipe?: never;
        key?: never;
        touch_down?: never;
        touch_move?: never;
        touch_up?: never;
        start?: never;
        stop?: never;
        resolution?: never;
        image?: dependency_1.Handle;
        uuid?: never;
        set_option?: never;
    } | {
        connect?: never;
        click?: never;
        swipe?: never;
        key?: never;
        touch_down?: never;
        touch_move?: never;
        touch_up?: never;
        start?: never;
        stop?: never;
        resolution?: never;
        image?: never;
        uuid?: boolean;
        set_option?: never;
    } | {
        connect?: never;
        click?: never;
        swipe?: never;
        key?: never;
        touch_down?: never;
        touch_move?: never;
        touch_up?: never;
        start?: never;
        stop?: never;
        resolution?: never;
        image?: never;
        uuid?: never;
        set_option?: CustomControllerSetOptionParam;
    }) | ({
        ctrl?: dependency_1.Id;
    }) | ({
        id?: dependency_1.Id;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ctrl" in data && data.ctrl != undefined) {
                this.ctrl = data.ctrl;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("connect" in data && data.connect != undefined) {
                this.connect = data.connect;
            }
            if ("click" in data && data.click != undefined) {
                this.click = data.click;
            }
            if ("swipe" in data && data.swipe != undefined) {
                this.swipe = data.swipe;
            }
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("touch_down" in data && data.touch_down != undefined) {
                this.touch_down = data.touch_down;
            }
            if ("touch_move" in data && data.touch_move != undefined) {
                this.touch_move = data.touch_move;
            }
            if ("touch_up" in data && data.touch_up != undefined) {
                this.touch_up = data.touch_up;
            }
            if ("start" in data && data.start != undefined) {
                this.start = data.start;
            }
            if ("stop" in data && data.stop != undefined) {
                this.stop = data.stop;
            }
            if ("resolution" in data && data.resolution != undefined) {
                this.resolution = data.resolution;
            }
            if ("image" in data && data.image != undefined) {
                this.image = data.image;
            }
            if ("uuid" in data && data.uuid != undefined) {
                this.uuid = data.uuid;
            }
            if ("set_option" in data && data.set_option != undefined) {
                this.set_option = data.set_option;
            }
        }
    }
    get ctrl() {
        return pb_1.Message.getWrapperField(this, dependency_1.Id, 1) as dependency_1.Id;
    }
    set ctrl(value: dependency_1.Id) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[1], value);
    }
    get has_ctrl() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get id() {
        return pb_1.Message.getWrapperField(this, dependency_1.Id, 2) as dependency_1.Id;
    }
    set id(value: dependency_1.Id) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[2], value);
    }
    get has_id() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get connect() {
        return pb_1.Message.getFieldWithDefault(this, 101, false) as boolean;
    }
    set connect(value: boolean) {
        pb_1.Message.setOneofField(this, 101, this.#one_of_decls[0], value);
    }
    get has_connect() {
        return pb_1.Message.getField(this, 101) != null;
    }
    get click() {
        return pb_1.Message.getWrapperField(this, dependency_1.ClickParam, 102) as dependency_1.ClickParam;
    }
    set click(value: dependency_1.ClickParam) {
        pb_1.Message.setOneofWrapperField(this, 102, this.#one_of_decls[0], value);
    }
    get has_click() {
        return pb_1.Message.getField(this, 102) != null;
    }
    get swipe() {
        return pb_1.Message.getWrapperField(this, dependency_1.SwipeParam, 103) as dependency_1.SwipeParam;
    }
    set swipe(value: dependency_1.SwipeParam) {
        pb_1.Message.setOneofWrapperField(this, 103, this.#one_of_decls[0], value);
    }
    get has_swipe() {
        return pb_1.Message.getField(this, 103) != null;
    }
    get key() {
        return pb_1.Message.getWrapperField(this, dependency_1.KeyParam, 104) as dependency_1.KeyParam;
    }
    set key(value: dependency_1.KeyParam) {
        pb_1.Message.setOneofWrapperField(this, 104, this.#one_of_decls[0], value);
    }
    get has_key() {
        return pb_1.Message.getField(this, 104) != null;
    }
    get touch_down() {
        return pb_1.Message.getWrapperField(this, dependency_1.TouchParam, 105) as dependency_1.TouchParam;
    }
    set touch_down(value: dependency_1.TouchParam) {
        pb_1.Message.setOneofWrapperField(this, 105, this.#one_of_decls[0], value);
    }
    get has_touch_down() {
        return pb_1.Message.getField(this, 105) != null;
    }
    get touch_move() {
        return pb_1.Message.getWrapperField(this, dependency_1.TouchParam, 106) as dependency_1.TouchParam;
    }
    set touch_move(value: dependency_1.TouchParam) {
        pb_1.Message.setOneofWrapperField(this, 106, this.#one_of_decls[0], value);
    }
    get has_touch_move() {
        return pb_1.Message.getField(this, 106) != null;
    }
    get touch_up() {
        return pb_1.Message.getWrapperField(this, dependency_1.TouchParam, 107) as dependency_1.TouchParam;
    }
    set touch_up(value: dependency_1.TouchParam) {
        pb_1.Message.setOneofWrapperField(this, 107, this.#one_of_decls[0], value);
    }
    get has_touch_up() {
        return pb_1.Message.getField(this, 107) != null;
    }
    get start() {
        return pb_1.Message.getFieldWithDefault(this, 108, "") as string;
    }
    set start(value: string) {
        pb_1.Message.setOneofField(this, 108, this.#one_of_decls[0], value);
    }
    get has_start() {
        return pb_1.Message.getField(this, 108) != null;
    }
    get stop() {
        return pb_1.Message.getFieldWithDefault(this, 109, "") as string;
    }
    set stop(value: string) {
        pb_1.Message.setOneofField(this, 109, this.#one_of_decls[0], value);
    }
    get has_stop() {
        return pb_1.Message.getField(this, 109) != null;
    }
    get resolution() {
        return pb_1.Message.getFieldWithDefault(this, 110, false) as boolean;
    }
    set resolution(value: boolean) {
        pb_1.Message.setOneofField(this, 110, this.#one_of_decls[0], value);
    }
    get has_resolution() {
        return pb_1.Message.getField(this, 110) != null;
    }
    get image() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 111) as dependency_1.Handle;
    }
    set image(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 111, this.#one_of_decls[0], value);
    }
    get has_image() {
        return pb_1.Message.getField(this, 111) != null;
    }
    get uuid() {
        return pb_1.Message.getFieldWithDefault(this, 112, false) as boolean;
    }
    set uuid(value: boolean) {
        pb_1.Message.setOneofField(this, 112, this.#one_of_decls[0], value);
    }
    get has_uuid() {
        return pb_1.Message.getField(this, 112) != null;
    }
    get set_option() {
        return pb_1.Message.getWrapperField(this, CustomControllerSetOptionParam, 200) as CustomControllerSetOptionParam;
    }
    set set_option(value: CustomControllerSetOptionParam) {
        pb_1.Message.setOneofWrapperField(this, 200, this.#one_of_decls[0], value);
    }
    get has_set_option() {
        return pb_1.Message.getField(this, 200) != null;
    }
    get command() {
        const cases: {
            [index: number]: "none" | "connect" | "click" | "swipe" | "key" | "touch_down" | "touch_move" | "touch_up" | "start" | "stop" | "resolution" | "image" | "uuid" | "set_option";
        } = {
            0: "none",
            101: "connect",
            102: "click",
            103: "swipe",
            104: "key",
            105: "touch_down",
            106: "touch_move",
            107: "touch_up",
            108: "start",
            109: "stop",
            110: "resolution",
            111: "image",
            112: "uuid",
            200: "set_option"
        };
        return cases[pb_1.Message.computeOneofCase(this, [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 200])];
    }
    get _ctrl() {
        const cases: {
            [index: number]: "none" | "ctrl";
        } = {
            0: "none",
            1: "ctrl"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _id() {
        const cases: {
            [index: number]: "none" | "id";
        } = {
            0: "none",
            2: "id"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        ctrl?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
        id?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
        connect?: boolean;
        click?: ReturnType<typeof dependency_1.ClickParam.prototype.toObject>;
        swipe?: ReturnType<typeof dependency_1.SwipeParam.prototype.toObject>;
        key?: ReturnType<typeof dependency_1.KeyParam.prototype.toObject>;
        touch_down?: ReturnType<typeof dependency_1.TouchParam.prototype.toObject>;
        touch_move?: ReturnType<typeof dependency_1.TouchParam.prototype.toObject>;
        touch_up?: ReturnType<typeof dependency_1.TouchParam.prototype.toObject>;
        start?: string;
        stop?: string;
        resolution?: boolean;
        image?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        uuid?: boolean;
        set_option?: ReturnType<typeof CustomControllerSetOptionParam.prototype.toObject>;
    }): CustomControllerResponse {
        const message = new CustomControllerResponse({});
        if (data.ctrl != null) {
            message.ctrl = dependency_1.Id.fromObject(data.ctrl);
        }
        if (data.id != null) {
            message.id = dependency_1.Id.fromObject(data.id);
        }
        if (data.connect != null) {
            message.connect = data.connect;
        }
        if (data.click != null) {
            message.click = dependency_1.ClickParam.fromObject(data.click);
        }
        if (data.swipe != null) {
            message.swipe = dependency_1.SwipeParam.fromObject(data.swipe);
        }
        if (data.key != null) {
            message.key = dependency_1.KeyParam.fromObject(data.key);
        }
        if (data.touch_down != null) {
            message.touch_down = dependency_1.TouchParam.fromObject(data.touch_down);
        }
        if (data.touch_move != null) {
            message.touch_move = dependency_1.TouchParam.fromObject(data.touch_move);
        }
        if (data.touch_up != null) {
            message.touch_up = dependency_1.TouchParam.fromObject(data.touch_up);
        }
        if (data.start != null) {
            message.start = data.start;
        }
        if (data.stop != null) {
            message.stop = data.stop;
        }
        if (data.resolution != null) {
            message.resolution = data.resolution;
        }
        if (data.image != null) {
            message.image = dependency_1.Handle.fromObject(data.image);
        }
        if (data.uuid != null) {
            message.uuid = data.uuid;
        }
        if (data.set_option != null) {
            message.set_option = CustomControllerSetOptionParam.fromObject(data.set_option);
        }
        return message;
    }
    toObject() {
        const data: {
            ctrl?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
            id?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
            connect?: boolean;
            click?: ReturnType<typeof dependency_1.ClickParam.prototype.toObject>;
            swipe?: ReturnType<typeof dependency_1.SwipeParam.prototype.toObject>;
            key?: ReturnType<typeof dependency_1.KeyParam.prototype.toObject>;
            touch_down?: ReturnType<typeof dependency_1.TouchParam.prototype.toObject>;
            touch_move?: ReturnType<typeof dependency_1.TouchParam.prototype.toObject>;
            touch_up?: ReturnType<typeof dependency_1.TouchParam.prototype.toObject>;
            start?: string;
            stop?: string;
            resolution?: boolean;
            image?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            uuid?: boolean;
            set_option?: ReturnType<typeof CustomControllerSetOptionParam.prototype.toObject>;
        } = {};
        if (this.ctrl != null) {
            data.ctrl = this.ctrl.toObject();
        }
        if (this.id != null) {
            data.id = this.id.toObject();
        }
        if (this.connect != null) {
            data.connect = this.connect;
        }
        if (this.click != null) {
            data.click = this.click.toObject();
        }
        if (this.swipe != null) {
            data.swipe = this.swipe.toObject();
        }
        if (this.key != null) {
            data.key = this.key.toObject();
        }
        if (this.touch_down != null) {
            data.touch_down = this.touch_down.toObject();
        }
        if (this.touch_move != null) {
            data.touch_move = this.touch_move.toObject();
        }
        if (this.touch_up != null) {
            data.touch_up = this.touch_up.toObject();
        }
        if (this.start != null) {
            data.start = this.start;
        }
        if (this.stop != null) {
            data.stop = this.stop;
        }
        if (this.resolution != null) {
            data.resolution = this.resolution;
        }
        if (this.image != null) {
            data.image = this.image.toObject();
        }
        if (this.uuid != null) {
            data.uuid = this.uuid;
        }
        if (this.set_option != null) {
            data.set_option = this.set_option.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_ctrl)
            writer.writeMessage(1, this.ctrl, () => this.ctrl.serialize(writer));
        if (this.has_id)
            writer.writeMessage(2, this.id, () => this.id.serialize(writer));
        if (this.has_connect)
            writer.writeBool(101, this.connect);
        if (this.has_click)
            writer.writeMessage(102, this.click, () => this.click.serialize(writer));
        if (this.has_swipe)
            writer.writeMessage(103, this.swipe, () => this.swipe.serialize(writer));
        if (this.has_key)
            writer.writeMessage(104, this.key, () => this.key.serialize(writer));
        if (this.has_touch_down)
            writer.writeMessage(105, this.touch_down, () => this.touch_down.serialize(writer));
        if (this.has_touch_move)
            writer.writeMessage(106, this.touch_move, () => this.touch_move.serialize(writer));
        if (this.has_touch_up)
            writer.writeMessage(107, this.touch_up, () => this.touch_up.serialize(writer));
        if (this.has_start)
            writer.writeString(108, this.start);
        if (this.has_stop)
            writer.writeString(109, this.stop);
        if (this.has_resolution)
            writer.writeBool(110, this.resolution);
        if (this.has_image)
            writer.writeMessage(111, this.image, () => this.image.serialize(writer));
        if (this.has_uuid)
            writer.writeBool(112, this.uuid);
        if (this.has_set_option)
            writer.writeMessage(200, this.set_option, () => this.set_option.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomControllerResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomControllerResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.ctrl, () => message.ctrl = dependency_1.Id.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.id, () => message.id = dependency_1.Id.deserialize(reader));
                    break;
                case 101:
                    message.connect = reader.readBool();
                    break;
                case 102:
                    reader.readMessage(message.click, () => message.click = dependency_1.ClickParam.deserialize(reader));
                    break;
                case 103:
                    reader.readMessage(message.swipe, () => message.swipe = dependency_1.SwipeParam.deserialize(reader));
                    break;
                case 104:
                    reader.readMessage(message.key, () => message.key = dependency_1.KeyParam.deserialize(reader));
                    break;
                case 105:
                    reader.readMessage(message.touch_down, () => message.touch_down = dependency_1.TouchParam.deserialize(reader));
                    break;
                case 106:
                    reader.readMessage(message.touch_move, () => message.touch_move = dependency_1.TouchParam.deserialize(reader));
                    break;
                case 107:
                    reader.readMessage(message.touch_up, () => message.touch_up = dependency_1.TouchParam.deserialize(reader));
                    break;
                case 108:
                    message.start = reader.readString();
                    break;
                case 109:
                    message.stop = reader.readString();
                    break;
                case 110:
                    message.resolution = reader.readBool();
                    break;
                case 111:
                    reader.readMessage(message.image, () => message.image = dependency_1.Handle.deserialize(reader));
                    break;
                case 112:
                    message.uuid = reader.readBool();
                    break;
                case 200:
                    reader.readMessage(message.set_option, () => message.set_option = CustomControllerSetOptionParam.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CustomControllerResponse {
        return CustomControllerResponse.deserialize(bytes);
    }
}
export class SubmitCustomControllerRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[101, 102], [1], [2], [3]];
    constructor(data?: any[] | ({} & (({
        resolution?: dependency_1.Size;
        uuid?: never;
    } | {
        resolution?: never;
        uuid?: string;
    }) | ({
        handle?: dependency_1.Handle;
    }) | ({
        id?: dependency_1.Id;
    }) | ({
        ok?: boolean;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("ok" in data && data.ok != undefined) {
                this.ok = data.ok;
            }
            if ("resolution" in data && data.resolution != undefined) {
                this.resolution = data.resolution;
            }
            if ("uuid" in data && data.uuid != undefined) {
                this.uuid = data.uuid;
            }
        }
    }
    get handle() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set handle(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[1], value);
    }
    get has_handle() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get id() {
        return pb_1.Message.getWrapperField(this, dependency_1.Id, 2) as dependency_1.Id;
    }
    set id(value: dependency_1.Id) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[2], value);
    }
    get has_id() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get ok() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set ok(value: boolean) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[3], value);
    }
    get has_ok() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get resolution() {
        return pb_1.Message.getWrapperField(this, dependency_1.Size, 101) as dependency_1.Size;
    }
    set resolution(value: dependency_1.Size) {
        pb_1.Message.setOneofWrapperField(this, 101, this.#one_of_decls[0], value);
    }
    get has_resolution() {
        return pb_1.Message.getField(this, 101) != null;
    }
    get uuid() {
        return pb_1.Message.getFieldWithDefault(this, 102, "") as string;
    }
    set uuid(value: string) {
        pb_1.Message.setOneofField(this, 102, this.#one_of_decls[0], value);
    }
    get has_uuid() {
        return pb_1.Message.getField(this, 102) != null;
    }
    get result() {
        const cases: {
            [index: number]: "none" | "resolution" | "uuid";
        } = {
            0: "none",
            101: "resolution",
            102: "uuid"
        };
        return cases[pb_1.Message.computeOneofCase(this, [101, 102])];
    }
    get _handle() {
        const cases: {
            [index: number]: "none" | "handle";
        } = {
            0: "none",
            1: "handle"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _id() {
        const cases: {
            [index: number]: "none" | "id";
        } = {
            0: "none",
            2: "id"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _ok() {
        const cases: {
            [index: number]: "none" | "ok";
        } = {
            0: "none",
            3: "ok"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        id?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
        ok?: boolean;
        resolution?: ReturnType<typeof dependency_1.Size.prototype.toObject>;
        uuid?: string;
    }): SubmitCustomControllerRequest {
        const message = new SubmitCustomControllerRequest({});
        if (data.handle != null) {
            message.handle = dependency_1.Handle.fromObject(data.handle);
        }
        if (data.id != null) {
            message.id = dependency_1.Id.fromObject(data.id);
        }
        if (data.ok != null) {
            message.ok = data.ok;
        }
        if (data.resolution != null) {
            message.resolution = dependency_1.Size.fromObject(data.resolution);
        }
        if (data.uuid != null) {
            message.uuid = data.uuid;
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            id?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
            ok?: boolean;
            resolution?: ReturnType<typeof dependency_1.Size.prototype.toObject>;
            uuid?: string;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle.toObject();
        }
        if (this.id != null) {
            data.id = this.id.toObject();
        }
        if (this.ok != null) {
            data.ok = this.ok;
        }
        if (this.resolution != null) {
            data.resolution = this.resolution.toObject();
        }
        if (this.uuid != null) {
            data.uuid = this.uuid;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_handle)
            writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
        if (this.has_id)
            writer.writeMessage(2, this.id, () => this.id.serialize(writer));
        if (this.has_ok)
            writer.writeBool(3, this.ok);
        if (this.has_resolution)
            writer.writeMessage(101, this.resolution, () => this.resolution.serialize(writer));
        if (this.has_uuid)
            writer.writeString(102, this.uuid);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmitCustomControllerRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmitCustomControllerRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.handle, () => message.handle = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.id, () => message.id = dependency_1.Id.deserialize(reader));
                    break;
                case 3:
                    message.ok = reader.readBool();
                    break;
                case 101:
                    reader.readMessage(message.resolution, () => message.resolution = dependency_1.Size.deserialize(reader));
                    break;
                case 102:
                    message.uuid = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SubmitCustomControllerRequest {
        return SubmitCustomControllerRequest.deserialize(bytes);
    }
}
export class ControllerSetOptionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2, 3, 4]];
    constructor(data?: any[] | ({} & (({
        long_side?: number;
        short_side?: never;
        def_package_entry?: never;
        def_package?: never;
    } | {
        long_side?: never;
        short_side?: number;
        def_package_entry?: never;
        def_package?: never;
    } | {
        long_side?: never;
        short_side?: never;
        def_package_entry?: string;
        def_package?: never;
    } | {
        long_side?: never;
        short_side?: never;
        def_package_entry?: never;
        def_package?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("long_side" in data && data.long_side != undefined) {
                this.long_side = data.long_side;
            }
            if ("short_side" in data && data.short_side != undefined) {
                this.short_side = data.short_side;
            }
            if ("def_package_entry" in data && data.def_package_entry != undefined) {
                this.def_package_entry = data.def_package_entry;
            }
            if ("def_package" in data && data.def_package != undefined) {
                this.def_package = data.def_package;
            }
        }
    }
    get long_side() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set long_side(value: number) {
        pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get has_long_side() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get short_side() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set short_side(value: number) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_short_side() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get def_package_entry() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set def_package_entry(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
    }
    get has_def_package_entry() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get def_package() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set def_package(value: string) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
    }
    get has_def_package() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get option() {
        const cases: {
            [index: number]: "none" | "long_side" | "short_side" | "def_package_entry" | "def_package";
        } = {
            0: "none",
            1: "long_side",
            2: "short_side",
            3: "def_package_entry",
            4: "def_package"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4])];
    }
    static fromObject(data: {
        long_side?: number;
        short_side?: number;
        def_package_entry?: string;
        def_package?: string;
    }): ControllerSetOptionRequest {
        const message = new ControllerSetOptionRequest({});
        if (data.long_side != null) {
            message.long_side = data.long_side;
        }
        if (data.short_side != null) {
            message.short_side = data.short_side;
        }
        if (data.def_package_entry != null) {
            message.def_package_entry = data.def_package_entry;
        }
        if (data.def_package != null) {
            message.def_package = data.def_package;
        }
        return message;
    }
    toObject() {
        const data: {
            long_side?: number;
            short_side?: number;
            def_package_entry?: string;
            def_package?: string;
        } = {};
        if (this.long_side != null) {
            data.long_side = this.long_side;
        }
        if (this.short_side != null) {
            data.short_side = this.short_side;
        }
        if (this.def_package_entry != null) {
            data.def_package_entry = this.def_package_entry;
        }
        if (this.def_package != null) {
            data.def_package = this.def_package;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_long_side)
            writer.writeInt32(1, this.long_side);
        if (this.has_short_side)
            writer.writeInt32(2, this.short_side);
        if (this.has_def_package_entry)
            writer.writeString(3, this.def_package_entry);
        if (this.has_def_package)
            writer.writeString(4, this.def_package);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ControllerSetOptionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ControllerSetOptionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.long_side = reader.readInt32();
                    break;
                case 2:
                    message.short_side = reader.readInt32();
                    break;
                case 3:
                    message.def_package_entry = reader.readString();
                    break;
                case 4:
                    message.def_package = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ControllerSetOptionRequest {
        return ControllerSetOptionRequest.deserialize(bytes);
    }
}
export class ControllerPostClickRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2]];
    constructor(data?: any[] | ({} & (({
        handle?: dependency_1.Handle;
    }) | ({
        param?: dependency_1.ClickParam;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("param" in data && data.param != undefined) {
                this.param = data.param;
            }
        }
    }
    get handle() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set handle(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_handle() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get param() {
        return pb_1.Message.getWrapperField(this, dependency_1.ClickParam, 2) as dependency_1.ClickParam;
    }
    set param(value: dependency_1.ClickParam) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get has_param() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _handle() {
        const cases: {
            [index: number]: "none" | "handle";
        } = {
            0: "none",
            1: "handle"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _param() {
        const cases: {
            [index: number]: "none" | "param";
        } = {
            0: "none",
            2: "param"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        param?: ReturnType<typeof dependency_1.ClickParam.prototype.toObject>;
    }): ControllerPostClickRequest {
        const message = new ControllerPostClickRequest({});
        if (data.handle != null) {
            message.handle = dependency_1.Handle.fromObject(data.handle);
        }
        if (data.param != null) {
            message.param = dependency_1.ClickParam.fromObject(data.param);
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            param?: ReturnType<typeof dependency_1.ClickParam.prototype.toObject>;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle.toObject();
        }
        if (this.param != null) {
            data.param = this.param.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_handle)
            writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
        if (this.has_param)
            writer.writeMessage(2, this.param, () => this.param.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ControllerPostClickRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ControllerPostClickRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.handle, () => message.handle = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.param, () => message.param = dependency_1.ClickParam.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ControllerPostClickRequest {
        return ControllerPostClickRequest.deserialize(bytes);
    }
}
export class ControllerPostSwipeRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2]];
    constructor(data?: any[] | ({} & (({
        handle?: dependency_1.Handle;
    }) | ({
        param?: dependency_1.SwipeParam;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("param" in data && data.param != undefined) {
                this.param = data.param;
            }
        }
    }
    get handle() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set handle(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_handle() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get param() {
        return pb_1.Message.getWrapperField(this, dependency_1.SwipeParam, 2) as dependency_1.SwipeParam;
    }
    set param(value: dependency_1.SwipeParam) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get has_param() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _handle() {
        const cases: {
            [index: number]: "none" | "handle";
        } = {
            0: "none",
            1: "handle"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _param() {
        const cases: {
            [index: number]: "none" | "param";
        } = {
            0: "none",
            2: "param"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        param?: ReturnType<typeof dependency_1.SwipeParam.prototype.toObject>;
    }): ControllerPostSwipeRequest {
        const message = new ControllerPostSwipeRequest({});
        if (data.handle != null) {
            message.handle = dependency_1.Handle.fromObject(data.handle);
        }
        if (data.param != null) {
            message.param = dependency_1.SwipeParam.fromObject(data.param);
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            param?: ReturnType<typeof dependency_1.SwipeParam.prototype.toObject>;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle.toObject();
        }
        if (this.param != null) {
            data.param = this.param.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_handle)
            writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
        if (this.has_param)
            writer.writeMessage(2, this.param, () => this.param.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ControllerPostSwipeRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ControllerPostSwipeRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.handle, () => message.handle = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.param, () => message.param = dependency_1.SwipeParam.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ControllerPostSwipeRequest {
        return ControllerPostSwipeRequest.deserialize(bytes);
    }
}
export class ControllerPostKeyRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2]];
    constructor(data?: any[] | ({} & (({
        handle?: dependency_1.Handle;
    }) | ({
        param?: dependency_1.KeyParam;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("param" in data && data.param != undefined) {
                this.param = data.param;
            }
        }
    }
    get handle() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set handle(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_handle() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get param() {
        return pb_1.Message.getWrapperField(this, dependency_1.KeyParam, 2) as dependency_1.KeyParam;
    }
    set param(value: dependency_1.KeyParam) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get has_param() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _handle() {
        const cases: {
            [index: number]: "none" | "handle";
        } = {
            0: "none",
            1: "handle"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _param() {
        const cases: {
            [index: number]: "none" | "param";
        } = {
            0: "none",
            2: "param"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        param?: ReturnType<typeof dependency_1.KeyParam.prototype.toObject>;
    }): ControllerPostKeyRequest {
        const message = new ControllerPostKeyRequest({});
        if (data.handle != null) {
            message.handle = dependency_1.Handle.fromObject(data.handle);
        }
        if (data.param != null) {
            message.param = dependency_1.KeyParam.fromObject(data.param);
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            param?: ReturnType<typeof dependency_1.KeyParam.prototype.toObject>;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle.toObject();
        }
        if (this.param != null) {
            data.param = this.param.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_handle)
            writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
        if (this.has_param)
            writer.writeMessage(2, this.param, () => this.param.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ControllerPostKeyRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ControllerPostKeyRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.handle, () => message.handle = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.param, () => message.param = dependency_1.KeyParam.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ControllerPostKeyRequest {
        return ControllerPostKeyRequest.deserialize(bytes);
    }
}
export class ControllerPostTouchRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2]];
    constructor(data?: any[] | ({} & (({
        handle?: dependency_1.Handle;
    }) | ({
        param?: dependency_1.TouchParam;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("param" in data && data.param != undefined) {
                this.param = data.param;
            }
        }
    }
    get handle() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set handle(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_handle() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get param() {
        return pb_1.Message.getWrapperField(this, dependency_1.TouchParam, 2) as dependency_1.TouchParam;
    }
    set param(value: dependency_1.TouchParam) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get has_param() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _handle() {
        const cases: {
            [index: number]: "none" | "handle";
        } = {
            0: "none",
            1: "handle"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _param() {
        const cases: {
            [index: number]: "none" | "param";
        } = {
            0: "none",
            2: "param"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        param?: ReturnType<typeof dependency_1.TouchParam.prototype.toObject>;
    }): ControllerPostTouchRequest {
        const message = new ControllerPostTouchRequest({});
        if (data.handle != null) {
            message.handle = dependency_1.Handle.fromObject(data.handle);
        }
        if (data.param != null) {
            message.param = dependency_1.TouchParam.fromObject(data.param);
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            param?: ReturnType<typeof dependency_1.TouchParam.prototype.toObject>;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle.toObject();
        }
        if (this.param != null) {
            data.param = this.param.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_handle)
            writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
        if (this.has_param)
            writer.writeMessage(2, this.param, () => this.param.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ControllerPostTouchRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ControllerPostTouchRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.handle, () => message.handle = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.param, () => message.param = dependency_1.TouchParam.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ControllerPostTouchRequest {
        return ControllerPostTouchRequest.deserialize(bytes);
    }
}
export class ControllerGetImageRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2]];
    constructor(data?: any[] | ({} & (({
        handle?: dependency_1.Handle;
    }) | ({
        image?: dependency_1.Handle;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("image" in data && data.image != undefined) {
                this.image = data.image;
            }
        }
    }
    get handle() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set handle(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_handle() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get image() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 2) as dependency_1.Handle;
    }
    set image(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get has_image() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _handle() {
        const cases: {
            [index: number]: "none" | "handle";
        } = {
            0: "none",
            1: "handle"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _image() {
        const cases: {
            [index: number]: "none" | "image";
        } = {
            0: "none",
            2: "image"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        image?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
    }): ControllerGetImageRequest {
        const message = new ControllerGetImageRequest({});
        if (data.handle != null) {
            message.handle = dependency_1.Handle.fromObject(data.handle);
        }
        if (data.image != null) {
            message.image = dependency_1.Handle.fromObject(data.image);
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            image?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle.toObject();
        }
        if (this.image != null) {
            data.image = this.image.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_handle)
            writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
        if (this.has_image)
            writer.writeMessage(2, this.image, () => this.image.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ControllerGetImageRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ControllerGetImageRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.handle, () => message.handle = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.image, () => message.image = dependency_1.Handle.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ControllerGetImageRequest {
        return ControllerGetImageRequest.deserialize(bytes);
    }
}
export class CustomRecognizerRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2], [3]];
    constructor(data?: any[] | ({} & (({
        handle?: dependency_1.Handle;
    }) | ({
        name?: string;
    }) | ({
        reco?: dependency_1.Id;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("reco" in data && data.reco != undefined) {
                this.reco = data.reco;
            }
        }
    }
    get handle() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set handle(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_handle() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
    }
    get has_name() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get reco() {
        return pb_1.Message.getWrapperField(this, dependency_1.Id, 3) as dependency_1.Id;
    }
    set reco(value: dependency_1.Id) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[2], value);
    }
    get has_reco() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get _handle() {
        const cases: {
            [index: number]: "none" | "handle";
        } = {
            0: "none",
            1: "handle"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _name() {
        const cases: {
            [index: number]: "none" | "name";
        } = {
            0: "none",
            2: "name"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _reco() {
        const cases: {
            [index: number]: "none" | "reco";
        } = {
            0: "none",
            3: "reco"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        name?: string;
        reco?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
    }): CustomRecognizerRequest {
        const message = new CustomRecognizerRequest({});
        if (data.handle != null) {
            message.handle = dependency_1.Handle.fromObject(data.handle);
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.reco != null) {
            message.reco = dependency_1.Id.fromObject(data.reco);
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            name?: string;
            reco?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle.toObject();
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.reco != null) {
            data.reco = this.reco.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_handle)
            writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
        if (this.has_name)
            writer.writeString(2, this.name);
        if (this.has_reco)
            writer.writeMessage(3, this.reco, () => this.reco.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomRecognizerRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomRecognizerRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.handle, () => message.handle = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.reco, () => message.reco = dependency_1.Id.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CustomRecognizerRequest {
        return CustomRecognizerRequest.deserialize(bytes);
    }
}
export class CustomRecognizerAnalyzeParam extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2], [3], [4]];
    constructor(data?: any[] | ({} & (({
        context?: dependency_1.Handle;
    }) | ({
        image?: dependency_1.Handle;
    }) | ({
        task?: string;
    }) | ({
        param?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("context" in data && data.context != undefined) {
                this.context = data.context;
            }
            if ("image" in data && data.image != undefined) {
                this.image = data.image;
            }
            if ("task" in data && data.task != undefined) {
                this.task = data.task;
            }
            if ("param" in data && data.param != undefined) {
                this.param = data.param;
            }
        }
    }
    get context() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set context(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_context() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get image() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 2) as dependency_1.Handle;
    }
    set image(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get has_image() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get task() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set task(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
    }
    get has_task() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get param() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set param(value: string) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[3], value);
    }
    get has_param() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get _context() {
        const cases: {
            [index: number]: "none" | "context";
        } = {
            0: "none",
            1: "context"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _image() {
        const cases: {
            [index: number]: "none" | "image";
        } = {
            0: "none",
            2: "image"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _task() {
        const cases: {
            [index: number]: "none" | "task";
        } = {
            0: "none",
            3: "task"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get _param() {
        const cases: {
            [index: number]: "none" | "param";
        } = {
            0: "none",
            4: "param"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
        context?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        image?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        task?: string;
        param?: string;
    }): CustomRecognizerAnalyzeParam {
        const message = new CustomRecognizerAnalyzeParam({});
        if (data.context != null) {
            message.context = dependency_1.Handle.fromObject(data.context);
        }
        if (data.image != null) {
            message.image = dependency_1.Handle.fromObject(data.image);
        }
        if (data.task != null) {
            message.task = data.task;
        }
        if (data.param != null) {
            message.param = data.param;
        }
        return message;
    }
    toObject() {
        const data: {
            context?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            image?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            task?: string;
            param?: string;
        } = {};
        if (this.context != null) {
            data.context = this.context.toObject();
        }
        if (this.image != null) {
            data.image = this.image.toObject();
        }
        if (this.task != null) {
            data.task = this.task;
        }
        if (this.param != null) {
            data.param = this.param;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_context)
            writer.writeMessage(1, this.context, () => this.context.serialize(writer));
        if (this.has_image)
            writer.writeMessage(2, this.image, () => this.image.serialize(writer));
        if (this.has_task)
            writer.writeString(3, this.task);
        if (this.has_param)
            writer.writeString(4, this.param);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomRecognizerAnalyzeParam {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomRecognizerAnalyzeParam();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.context, () => message.context = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.image, () => message.image = dependency_1.Handle.deserialize(reader));
                    break;
                case 3:
                    message.task = reader.readString();
                    break;
                case 4:
                    message.param = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CustomRecognizerAnalyzeParam {
        return CustomRecognizerAnalyzeParam.deserialize(bytes);
    }
}
export class CustomRecognizerResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[101], [1], [2]];
    constructor(data?: any[] | ({} & (({
        analyze?: CustomRecognizerAnalyzeParam;
    }) | ({
        reco?: dependency_1.Id;
    }) | ({
        id?: dependency_1.Id;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("reco" in data && data.reco != undefined) {
                this.reco = data.reco;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("analyze" in data && data.analyze != undefined) {
                this.analyze = data.analyze;
            }
        }
    }
    get reco() {
        return pb_1.Message.getWrapperField(this, dependency_1.Id, 1) as dependency_1.Id;
    }
    set reco(value: dependency_1.Id) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[1], value);
    }
    get has_reco() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get id() {
        return pb_1.Message.getWrapperField(this, dependency_1.Id, 2) as dependency_1.Id;
    }
    set id(value: dependency_1.Id) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[2], value);
    }
    get has_id() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get analyze() {
        return pb_1.Message.getWrapperField(this, CustomRecognizerAnalyzeParam, 101) as CustomRecognizerAnalyzeParam;
    }
    set analyze(value: CustomRecognizerAnalyzeParam) {
        pb_1.Message.setOneofWrapperField(this, 101, this.#one_of_decls[0], value);
    }
    get has_analyze() {
        return pb_1.Message.getField(this, 101) != null;
    }
    get command() {
        const cases: {
            [index: number]: "none" | "analyze";
        } = {
            0: "none",
            101: "analyze"
        };
        return cases[pb_1.Message.computeOneofCase(this, [101])];
    }
    get _reco() {
        const cases: {
            [index: number]: "none" | "reco";
        } = {
            0: "none",
            1: "reco"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _id() {
        const cases: {
            [index: number]: "none" | "id";
        } = {
            0: "none",
            2: "id"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        reco?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
        id?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
        analyze?: ReturnType<typeof CustomRecognizerAnalyzeParam.prototype.toObject>;
    }): CustomRecognizerResponse {
        const message = new CustomRecognizerResponse({});
        if (data.reco != null) {
            message.reco = dependency_1.Id.fromObject(data.reco);
        }
        if (data.id != null) {
            message.id = dependency_1.Id.fromObject(data.id);
        }
        if (data.analyze != null) {
            message.analyze = CustomRecognizerAnalyzeParam.fromObject(data.analyze);
        }
        return message;
    }
    toObject() {
        const data: {
            reco?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
            id?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
            analyze?: ReturnType<typeof CustomRecognizerAnalyzeParam.prototype.toObject>;
        } = {};
        if (this.reco != null) {
            data.reco = this.reco.toObject();
        }
        if (this.id != null) {
            data.id = this.id.toObject();
        }
        if (this.analyze != null) {
            data.analyze = this.analyze.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_reco)
            writer.writeMessage(1, this.reco, () => this.reco.serialize(writer));
        if (this.has_id)
            writer.writeMessage(2, this.id, () => this.id.serialize(writer));
        if (this.has_analyze)
            writer.writeMessage(101, this.analyze, () => this.analyze.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomRecognizerResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomRecognizerResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.reco, () => message.reco = dependency_1.Id.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.id, () => message.id = dependency_1.Id.deserialize(reader));
                    break;
                case 101:
                    reader.readMessage(message.analyze, () => message.analyze = CustomRecognizerAnalyzeParam.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CustomRecognizerResponse {
        return CustomRecognizerResponse.deserialize(bytes);
    }
}
export class CustomRecognizerAnalyzeResult extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2], [3]];
    constructor(data?: any[] | ({} & (({
        match?: boolean;
    }) | ({
        box?: dependency_1.Rect;
    }) | ({
        detail?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("match" in data && data.match != undefined) {
                this.match = data.match;
            }
            if ("box" in data && data.box != undefined) {
                this.box = data.box;
            }
            if ("detail" in data && data.detail != undefined) {
                this.detail = data.detail;
            }
        }
    }
    get match() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set match(value: boolean) {
        pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get has_match() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get box() {
        return pb_1.Message.getWrapperField(this, dependency_1.Rect, 2) as dependency_1.Rect;
    }
    set box(value: dependency_1.Rect) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get has_box() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get detail() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set detail(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
    }
    get has_detail() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get _match() {
        const cases: {
            [index: number]: "none" | "match";
        } = {
            0: "none",
            1: "match"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _box() {
        const cases: {
            [index: number]: "none" | "box";
        } = {
            0: "none",
            2: "box"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _detail() {
        const cases: {
            [index: number]: "none" | "detail";
        } = {
            0: "none",
            3: "detail"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        match?: boolean;
        box?: ReturnType<typeof dependency_1.Rect.prototype.toObject>;
        detail?: string;
    }): CustomRecognizerAnalyzeResult {
        const message = new CustomRecognizerAnalyzeResult({});
        if (data.match != null) {
            message.match = data.match;
        }
        if (data.box != null) {
            message.box = dependency_1.Rect.fromObject(data.box);
        }
        if (data.detail != null) {
            message.detail = data.detail;
        }
        return message;
    }
    toObject() {
        const data: {
            match?: boolean;
            box?: ReturnType<typeof dependency_1.Rect.prototype.toObject>;
            detail?: string;
        } = {};
        if (this.match != null) {
            data.match = this.match;
        }
        if (this.box != null) {
            data.box = this.box.toObject();
        }
        if (this.detail != null) {
            data.detail = this.detail;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_match)
            writer.writeBool(1, this.match);
        if (this.has_box)
            writer.writeMessage(2, this.box, () => this.box.serialize(writer));
        if (this.has_detail)
            writer.writeString(3, this.detail);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomRecognizerAnalyzeResult {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomRecognizerAnalyzeResult();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.match = reader.readBool();
                    break;
                case 2:
                    reader.readMessage(message.box, () => message.box = dependency_1.Rect.deserialize(reader));
                    break;
                case 3:
                    message.detail = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CustomRecognizerAnalyzeResult {
        return CustomRecognizerAnalyzeResult.deserialize(bytes);
    }
}
export class SubmitCustomRecognizerRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[101], [1], [2], [3]];
    constructor(data?: any[] | ({} & (({
        analyze?: CustomRecognizerAnalyzeResult;
    }) | ({
        handle?: dependency_1.Handle;
    }) | ({
        id?: dependency_1.Id;
    }) | ({
        ok?: boolean;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("ok" in data && data.ok != undefined) {
                this.ok = data.ok;
            }
            if ("analyze" in data && data.analyze != undefined) {
                this.analyze = data.analyze;
            }
        }
    }
    get handle() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set handle(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[1], value);
    }
    get has_handle() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get id() {
        return pb_1.Message.getWrapperField(this, dependency_1.Id, 2) as dependency_1.Id;
    }
    set id(value: dependency_1.Id) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[2], value);
    }
    get has_id() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get ok() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set ok(value: boolean) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[3], value);
    }
    get has_ok() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get analyze() {
        return pb_1.Message.getWrapperField(this, CustomRecognizerAnalyzeResult, 101) as CustomRecognizerAnalyzeResult;
    }
    set analyze(value: CustomRecognizerAnalyzeResult) {
        pb_1.Message.setOneofWrapperField(this, 101, this.#one_of_decls[0], value);
    }
    get has_analyze() {
        return pb_1.Message.getField(this, 101) != null;
    }
    get result() {
        const cases: {
            [index: number]: "none" | "analyze";
        } = {
            0: "none",
            101: "analyze"
        };
        return cases[pb_1.Message.computeOneofCase(this, [101])];
    }
    get _handle() {
        const cases: {
            [index: number]: "none" | "handle";
        } = {
            0: "none",
            1: "handle"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _id() {
        const cases: {
            [index: number]: "none" | "id";
        } = {
            0: "none",
            2: "id"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _ok() {
        const cases: {
            [index: number]: "none" | "ok";
        } = {
            0: "none",
            3: "ok"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        id?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
        ok?: boolean;
        analyze?: ReturnType<typeof CustomRecognizerAnalyzeResult.prototype.toObject>;
    }): SubmitCustomRecognizerRequest {
        const message = new SubmitCustomRecognizerRequest({});
        if (data.handle != null) {
            message.handle = dependency_1.Handle.fromObject(data.handle);
        }
        if (data.id != null) {
            message.id = dependency_1.Id.fromObject(data.id);
        }
        if (data.ok != null) {
            message.ok = data.ok;
        }
        if (data.analyze != null) {
            message.analyze = CustomRecognizerAnalyzeResult.fromObject(data.analyze);
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            id?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
            ok?: boolean;
            analyze?: ReturnType<typeof CustomRecognizerAnalyzeResult.prototype.toObject>;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle.toObject();
        }
        if (this.id != null) {
            data.id = this.id.toObject();
        }
        if (this.ok != null) {
            data.ok = this.ok;
        }
        if (this.analyze != null) {
            data.analyze = this.analyze.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_handle)
            writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
        if (this.has_id)
            writer.writeMessage(2, this.id, () => this.id.serialize(writer));
        if (this.has_ok)
            writer.writeBool(3, this.ok);
        if (this.has_analyze)
            writer.writeMessage(101, this.analyze, () => this.analyze.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmitCustomRecognizerRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmitCustomRecognizerRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.handle, () => message.handle = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.id, () => message.id = dependency_1.Id.deserialize(reader));
                    break;
                case 3:
                    message.ok = reader.readBool();
                    break;
                case 101:
                    reader.readMessage(message.analyze, () => message.analyze = CustomRecognizerAnalyzeResult.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SubmitCustomRecognizerRequest {
        return SubmitCustomRecognizerRequest.deserialize(bytes);
    }
}
export class CustomActionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2], [3]];
    constructor(data?: any[] | ({} & (({
        handle?: dependency_1.Handle;
    }) | ({
        name?: string;
    }) | ({
        act?: dependency_1.Id;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("act" in data && data.act != undefined) {
                this.act = data.act;
            }
        }
    }
    get handle() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set handle(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_handle() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
    }
    get has_name() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get act() {
        return pb_1.Message.getWrapperField(this, dependency_1.Id, 3) as dependency_1.Id;
    }
    set act(value: dependency_1.Id) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[2], value);
    }
    get has_act() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get _handle() {
        const cases: {
            [index: number]: "none" | "handle";
        } = {
            0: "none",
            1: "handle"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _name() {
        const cases: {
            [index: number]: "none" | "name";
        } = {
            0: "none",
            2: "name"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _act() {
        const cases: {
            [index: number]: "none" | "act";
        } = {
            0: "none",
            3: "act"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        name?: string;
        act?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
    }): CustomActionRequest {
        const message = new CustomActionRequest({});
        if (data.handle != null) {
            message.handle = dependency_1.Handle.fromObject(data.handle);
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.act != null) {
            message.act = dependency_1.Id.fromObject(data.act);
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            name?: string;
            act?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle.toObject();
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.act != null) {
            data.act = this.act.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_handle)
            writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
        if (this.has_name)
            writer.writeString(2, this.name);
        if (this.has_act)
            writer.writeMessage(3, this.act, () => this.act.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomActionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomActionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.handle, () => message.handle = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.act, () => message.act = dependency_1.Id.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CustomActionRequest {
        return CustomActionRequest.deserialize(bytes);
    }
}
export class CustomActionRunParam extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2], [3], [4], [5]];
    constructor(data?: any[] | ({} & (({
        context?: dependency_1.Handle;
    }) | ({
        task?: string;
    }) | ({
        param?: string;
    }) | ({
        box?: dependency_1.Rect;
    }) | ({
        detail?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("context" in data && data.context != undefined) {
                this.context = data.context;
            }
            if ("task" in data && data.task != undefined) {
                this.task = data.task;
            }
            if ("param" in data && data.param != undefined) {
                this.param = data.param;
            }
            if ("box" in data && data.box != undefined) {
                this.box = data.box;
            }
            if ("detail" in data && data.detail != undefined) {
                this.detail = data.detail;
            }
        }
    }
    get context() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set context(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_context() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get task() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set task(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
    }
    get has_task() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get param() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set param(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
    }
    get has_param() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get box() {
        return pb_1.Message.getWrapperField(this, dependency_1.Rect, 4) as dependency_1.Rect;
    }
    set box(value: dependency_1.Rect) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[3], value);
    }
    get has_box() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get detail() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set detail(value: string) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[4], value);
    }
    get has_detail() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get _context() {
        const cases: {
            [index: number]: "none" | "context";
        } = {
            0: "none",
            1: "context"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _task() {
        const cases: {
            [index: number]: "none" | "task";
        } = {
            0: "none",
            2: "task"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _param() {
        const cases: {
            [index: number]: "none" | "param";
        } = {
            0: "none",
            3: "param"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get _box() {
        const cases: {
            [index: number]: "none" | "box";
        } = {
            0: "none",
            4: "box"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get _detail() {
        const cases: {
            [index: number]: "none" | "detail";
        } = {
            0: "none",
            5: "detail"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    static fromObject(data: {
        context?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        task?: string;
        param?: string;
        box?: ReturnType<typeof dependency_1.Rect.prototype.toObject>;
        detail?: string;
    }): CustomActionRunParam {
        const message = new CustomActionRunParam({});
        if (data.context != null) {
            message.context = dependency_1.Handle.fromObject(data.context);
        }
        if (data.task != null) {
            message.task = data.task;
        }
        if (data.param != null) {
            message.param = data.param;
        }
        if (data.box != null) {
            message.box = dependency_1.Rect.fromObject(data.box);
        }
        if (data.detail != null) {
            message.detail = data.detail;
        }
        return message;
    }
    toObject() {
        const data: {
            context?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            task?: string;
            param?: string;
            box?: ReturnType<typeof dependency_1.Rect.prototype.toObject>;
            detail?: string;
        } = {};
        if (this.context != null) {
            data.context = this.context.toObject();
        }
        if (this.task != null) {
            data.task = this.task;
        }
        if (this.param != null) {
            data.param = this.param;
        }
        if (this.box != null) {
            data.box = this.box.toObject();
        }
        if (this.detail != null) {
            data.detail = this.detail;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_context)
            writer.writeMessage(1, this.context, () => this.context.serialize(writer));
        if (this.has_task)
            writer.writeString(2, this.task);
        if (this.has_param)
            writer.writeString(3, this.param);
        if (this.has_box)
            writer.writeMessage(4, this.box, () => this.box.serialize(writer));
        if (this.has_detail)
            writer.writeString(5, this.detail);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomActionRunParam {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomActionRunParam();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.context, () => message.context = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    message.task = reader.readString();
                    break;
                case 3:
                    message.param = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message.box, () => message.box = dependency_1.Rect.deserialize(reader));
                    break;
                case 5:
                    message.detail = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CustomActionRunParam {
        return CustomActionRunParam.deserialize(bytes);
    }
}
export class CustomActionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[101, 102], [1], [2]];
    constructor(data?: any[] | ({} & (({
        run?: CustomActionRunParam;
        stop?: never;
    } | {
        run?: never;
        stop?: boolean;
    }) | ({
        act?: dependency_1.Id;
    }) | ({
        id?: dependency_1.Id;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("act" in data && data.act != undefined) {
                this.act = data.act;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("run" in data && data.run != undefined) {
                this.run = data.run;
            }
            if ("stop" in data && data.stop != undefined) {
                this.stop = data.stop;
            }
        }
    }
    get act() {
        return pb_1.Message.getWrapperField(this, dependency_1.Id, 1) as dependency_1.Id;
    }
    set act(value: dependency_1.Id) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[1], value);
    }
    get has_act() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get id() {
        return pb_1.Message.getWrapperField(this, dependency_1.Id, 2) as dependency_1.Id;
    }
    set id(value: dependency_1.Id) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[2], value);
    }
    get has_id() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get run() {
        return pb_1.Message.getWrapperField(this, CustomActionRunParam, 101) as CustomActionRunParam;
    }
    set run(value: CustomActionRunParam) {
        pb_1.Message.setOneofWrapperField(this, 101, this.#one_of_decls[0], value);
    }
    get has_run() {
        return pb_1.Message.getField(this, 101) != null;
    }
    get stop() {
        return pb_1.Message.getFieldWithDefault(this, 102, false) as boolean;
    }
    set stop(value: boolean) {
        pb_1.Message.setOneofField(this, 102, this.#one_of_decls[0], value);
    }
    get has_stop() {
        return pb_1.Message.getField(this, 102) != null;
    }
    get command() {
        const cases: {
            [index: number]: "none" | "run" | "stop";
        } = {
            0: "none",
            101: "run",
            102: "stop"
        };
        return cases[pb_1.Message.computeOneofCase(this, [101, 102])];
    }
    get _act() {
        const cases: {
            [index: number]: "none" | "act";
        } = {
            0: "none",
            1: "act"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _id() {
        const cases: {
            [index: number]: "none" | "id";
        } = {
            0: "none",
            2: "id"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        act?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
        id?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
        run?: ReturnType<typeof CustomActionRunParam.prototype.toObject>;
        stop?: boolean;
    }): CustomActionResponse {
        const message = new CustomActionResponse({});
        if (data.act != null) {
            message.act = dependency_1.Id.fromObject(data.act);
        }
        if (data.id != null) {
            message.id = dependency_1.Id.fromObject(data.id);
        }
        if (data.run != null) {
            message.run = CustomActionRunParam.fromObject(data.run);
        }
        if (data.stop != null) {
            message.stop = data.stop;
        }
        return message;
    }
    toObject() {
        const data: {
            act?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
            id?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
            run?: ReturnType<typeof CustomActionRunParam.prototype.toObject>;
            stop?: boolean;
        } = {};
        if (this.act != null) {
            data.act = this.act.toObject();
        }
        if (this.id != null) {
            data.id = this.id.toObject();
        }
        if (this.run != null) {
            data.run = this.run.toObject();
        }
        if (this.stop != null) {
            data.stop = this.stop;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_act)
            writer.writeMessage(1, this.act, () => this.act.serialize(writer));
        if (this.has_id)
            writer.writeMessage(2, this.id, () => this.id.serialize(writer));
        if (this.has_run)
            writer.writeMessage(101, this.run, () => this.run.serialize(writer));
        if (this.has_stop)
            writer.writeBool(102, this.stop);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomActionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomActionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.act, () => message.act = dependency_1.Id.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.id, () => message.id = dependency_1.Id.deserialize(reader));
                    break;
                case 101:
                    reader.readMessage(message.run, () => message.run = CustomActionRunParam.deserialize(reader));
                    break;
                case 102:
                    message.stop = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CustomActionResponse {
        return CustomActionResponse.deserialize(bytes);
    }
}
export class SubmitCustomActionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2], [3]];
    constructor(data?: any[] | ({} & (({
        handle?: dependency_1.Handle;
    }) | ({
        id?: dependency_1.Id;
    }) | ({
        ok?: boolean;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("ok" in data && data.ok != undefined) {
                this.ok = data.ok;
            }
        }
    }
    get handle() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set handle(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_handle() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get id() {
        return pb_1.Message.getWrapperField(this, dependency_1.Id, 2) as dependency_1.Id;
    }
    set id(value: dependency_1.Id) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get has_id() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get ok() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set ok(value: boolean) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
    }
    get has_ok() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get _handle() {
        const cases: {
            [index: number]: "none" | "handle";
        } = {
            0: "none",
            1: "handle"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _id() {
        const cases: {
            [index: number]: "none" | "id";
        } = {
            0: "none",
            2: "id"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _ok() {
        const cases: {
            [index: number]: "none" | "ok";
        } = {
            0: "none",
            3: "ok"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        id?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
        ok?: boolean;
    }): SubmitCustomActionRequest {
        const message = new SubmitCustomActionRequest({});
        if (data.handle != null) {
            message.handle = dependency_1.Handle.fromObject(data.handle);
        }
        if (data.id != null) {
            message.id = dependency_1.Id.fromObject(data.id);
        }
        if (data.ok != null) {
            message.ok = data.ok;
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            id?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
            ok?: boolean;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle.toObject();
        }
        if (this.id != null) {
            data.id = this.id.toObject();
        }
        if (this.ok != null) {
            data.ok = this.ok;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_handle)
            writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
        if (this.has_id)
            writer.writeMessage(2, this.id, () => this.id.serialize(writer));
        if (this.has_ok)
            writer.writeBool(3, this.ok);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmitCustomActionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmitCustomActionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.handle, () => message.handle = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.id, () => message.id = dependency_1.Id.deserialize(reader));
                    break;
                case 3:
                    message.ok = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SubmitCustomActionRequest {
        return SubmitCustomActionRequest.deserialize(bytes);
    }
}
export class InstancePostTaskRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2], [3]];
    constructor(data?: any[] | ({} & (({
        handle?: dependency_1.Handle;
    }) | ({
        task?: string;
    }) | ({
        param?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("task" in data && data.task != undefined) {
                this.task = data.task;
            }
            if ("param" in data && data.param != undefined) {
                this.param = data.param;
            }
        }
    }
    get handle() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set handle(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_handle() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get task() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set task(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
    }
    get has_task() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get param() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set param(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
    }
    get has_param() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get _handle() {
        const cases: {
            [index: number]: "none" | "handle";
        } = {
            0: "none",
            1: "handle"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _task() {
        const cases: {
            [index: number]: "none" | "task";
        } = {
            0: "none",
            2: "task"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _param() {
        const cases: {
            [index: number]: "none" | "param";
        } = {
            0: "none",
            3: "param"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        task?: string;
        param?: string;
    }): InstancePostTaskRequest {
        const message = new InstancePostTaskRequest({});
        if (data.handle != null) {
            message.handle = dependency_1.Handle.fromObject(data.handle);
        }
        if (data.task != null) {
            message.task = data.task;
        }
        if (data.param != null) {
            message.param = data.param;
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            task?: string;
            param?: string;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle.toObject();
        }
        if (this.task != null) {
            data.task = this.task;
        }
        if (this.param != null) {
            data.param = this.param;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_handle)
            writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
        if (this.has_task)
            writer.writeString(2, this.task);
        if (this.has_param)
            writer.writeString(3, this.param);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InstancePostTaskRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InstancePostTaskRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.handle, () => message.handle = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    message.task = reader.readString();
                    break;
                case 3:
                    message.param = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InstancePostTaskRequest {
        return InstancePostTaskRequest.deserialize(bytes);
    }
}
export class InstanceSetTaskParamRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2], [3]];
    constructor(data?: any[] | ({} & (({
        handle?: dependency_1.Handle;
    }) | ({
        id?: dependency_1.Id;
    }) | ({
        param?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("param" in data && data.param != undefined) {
                this.param = data.param;
            }
        }
    }
    get handle() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set handle(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_handle() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get id() {
        return pb_1.Message.getWrapperField(this, dependency_1.Id, 2) as dependency_1.Id;
    }
    set id(value: dependency_1.Id) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get has_id() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get param() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set param(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
    }
    get has_param() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get _handle() {
        const cases: {
            [index: number]: "none" | "handle";
        } = {
            0: "none",
            1: "handle"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _id() {
        const cases: {
            [index: number]: "none" | "id";
        } = {
            0: "none",
            2: "id"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _param() {
        const cases: {
            [index: number]: "none" | "param";
        } = {
            0: "none",
            3: "param"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        id?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
        param?: string;
    }): InstanceSetTaskParamRequest {
        const message = new InstanceSetTaskParamRequest({});
        if (data.handle != null) {
            message.handle = dependency_1.Handle.fromObject(data.handle);
        }
        if (data.id != null) {
            message.id = dependency_1.Id.fromObject(data.id);
        }
        if (data.param != null) {
            message.param = data.param;
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            id?: ReturnType<typeof dependency_1.Id.prototype.toObject>;
            param?: string;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle.toObject();
        }
        if (this.id != null) {
            data.id = this.id.toObject();
        }
        if (this.param != null) {
            data.param = this.param;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_handle)
            writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
        if (this.has_id)
            writer.writeMessage(2, this.id, () => this.id.serialize(writer));
        if (this.has_param)
            writer.writeString(3, this.param);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InstanceSetTaskParamRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InstanceSetTaskParamRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.handle, () => message.handle = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.id, () => message.id = dependency_1.Id.deserialize(reader));
                    break;
                case 3:
                    message.param = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InstanceSetTaskParamRequest {
        return InstanceSetTaskParamRequest.deserialize(bytes);
    }
}
export class SyncContextRunTaskRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2], [3]];
    constructor(data?: any[] | ({} & (({
        handle?: dependency_1.Handle;
    }) | ({
        task?: string;
    }) | ({
        param?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("task" in data && data.task != undefined) {
                this.task = data.task;
            }
            if ("param" in data && data.param != undefined) {
                this.param = data.param;
            }
        }
    }
    get handle() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set handle(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_handle() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get task() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set task(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
    }
    get has_task() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get param() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set param(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
    }
    get has_param() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get _handle() {
        const cases: {
            [index: number]: "none" | "handle";
        } = {
            0: "none",
            1: "handle"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _task() {
        const cases: {
            [index: number]: "none" | "task";
        } = {
            0: "none",
            2: "task"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _param() {
        const cases: {
            [index: number]: "none" | "param";
        } = {
            0: "none",
            3: "param"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        task?: string;
        param?: string;
    }): SyncContextRunTaskRequest {
        const message = new SyncContextRunTaskRequest({});
        if (data.handle != null) {
            message.handle = dependency_1.Handle.fromObject(data.handle);
        }
        if (data.task != null) {
            message.task = data.task;
        }
        if (data.param != null) {
            message.param = data.param;
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            task?: string;
            param?: string;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle.toObject();
        }
        if (this.task != null) {
            data.task = this.task;
        }
        if (this.param != null) {
            data.param = this.param;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_handle)
            writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
        if (this.has_task)
            writer.writeString(2, this.task);
        if (this.has_param)
            writer.writeString(3, this.param);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SyncContextRunTaskRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SyncContextRunTaskRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.handle, () => message.handle = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    message.task = reader.readString();
                    break;
                case 3:
                    message.param = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SyncContextRunTaskRequest {
        return SyncContextRunTaskRequest.deserialize(bytes);
    }
}
export class SyncContextRunRecognizerRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2], [3], [4]];
    constructor(data?: any[] | ({} & (({
        handle?: dependency_1.Handle;
    }) | ({
        task?: string;
    }) | ({
        param?: string;
    }) | ({
        image?: dependency_1.Handle;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("task" in data && data.task != undefined) {
                this.task = data.task;
            }
            if ("param" in data && data.param != undefined) {
                this.param = data.param;
            }
            if ("image" in data && data.image != undefined) {
                this.image = data.image;
            }
        }
    }
    get handle() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set handle(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_handle() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get task() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set task(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
    }
    get has_task() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get param() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set param(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
    }
    get has_param() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get image() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 4) as dependency_1.Handle;
    }
    set image(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[3], value);
    }
    get has_image() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get _handle() {
        const cases: {
            [index: number]: "none" | "handle";
        } = {
            0: "none",
            1: "handle"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _task() {
        const cases: {
            [index: number]: "none" | "task";
        } = {
            0: "none",
            2: "task"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _param() {
        const cases: {
            [index: number]: "none" | "param";
        } = {
            0: "none",
            3: "param"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get _image() {
        const cases: {
            [index: number]: "none" | "image";
        } = {
            0: "none",
            4: "image"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    static fromObject(data: {
        handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        task?: string;
        param?: string;
        image?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
    }): SyncContextRunRecognizerRequest {
        const message = new SyncContextRunRecognizerRequest({});
        if (data.handle != null) {
            message.handle = dependency_1.Handle.fromObject(data.handle);
        }
        if (data.task != null) {
            message.task = data.task;
        }
        if (data.param != null) {
            message.param = data.param;
        }
        if (data.image != null) {
            message.image = dependency_1.Handle.fromObject(data.image);
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            task?: string;
            param?: string;
            image?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle.toObject();
        }
        if (this.task != null) {
            data.task = this.task;
        }
        if (this.param != null) {
            data.param = this.param;
        }
        if (this.image != null) {
            data.image = this.image.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_handle)
            writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
        if (this.has_task)
            writer.writeString(2, this.task);
        if (this.has_param)
            writer.writeString(3, this.param);
        if (this.has_image)
            writer.writeMessage(4, this.image, () => this.image.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SyncContextRunRecognizerRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SyncContextRunRecognizerRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.handle, () => message.handle = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    message.task = reader.readString();
                    break;
                case 3:
                    message.param = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message.image, () => message.image = dependency_1.Handle.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SyncContextRunRecognizerRequest {
        return SyncContextRunRecognizerRequest.deserialize(bytes);
    }
}
export class SyncContextRunRecognizerResponse extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2], [3], [101]];
    constructor(data?: any[] | ({} & (({
        match?: boolean;
    }) | ({
        box?: dependency_1.Rect;
    }) | ({
        detail?: string;
    }) | ({
        status?: boolean;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("match" in data && data.match != undefined) {
                this.match = data.match;
            }
            if ("box" in data && data.box != undefined) {
                this.box = data.box;
            }
            if ("detail" in data && data.detail != undefined) {
                this.detail = data.detail;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
        }
    }
    get match() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set match(value: boolean) {
        pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get has_match() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get box() {
        return pb_1.Message.getWrapperField(this, dependency_1.Rect, 2) as dependency_1.Rect;
    }
    set box(value: dependency_1.Rect) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get has_box() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get detail() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set detail(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
    }
    get has_detail() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 101, false) as boolean;
    }
    set status(value: boolean) {
        pb_1.Message.setOneofField(this, 101, this.#one_of_decls[3], value);
    }
    get has_status() {
        return pb_1.Message.getField(this, 101) != null;
    }
    get _match() {
        const cases: {
            [index: number]: "none" | "match";
        } = {
            0: "none",
            1: "match"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _box() {
        const cases: {
            [index: number]: "none" | "box";
        } = {
            0: "none",
            2: "box"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _detail() {
        const cases: {
            [index: number]: "none" | "detail";
        } = {
            0: "none",
            3: "detail"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get _status() {
        const cases: {
            [index: number]: "none" | "status";
        } = {
            0: "none",
            101: "status"
        };
        return cases[pb_1.Message.computeOneofCase(this, [101])];
    }
    static fromObject(data: {
        match?: boolean;
        box?: ReturnType<typeof dependency_1.Rect.prototype.toObject>;
        detail?: string;
        status?: boolean;
    }): SyncContextRunRecognizerResponse {
        const message = new SyncContextRunRecognizerResponse({});
        if (data.match != null) {
            message.match = data.match;
        }
        if (data.box != null) {
            message.box = dependency_1.Rect.fromObject(data.box);
        }
        if (data.detail != null) {
            message.detail = data.detail;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        return message;
    }
    toObject() {
        const data: {
            match?: boolean;
            box?: ReturnType<typeof dependency_1.Rect.prototype.toObject>;
            detail?: string;
            status?: boolean;
        } = {};
        if (this.match != null) {
            data.match = this.match;
        }
        if (this.box != null) {
            data.box = this.box.toObject();
        }
        if (this.detail != null) {
            data.detail = this.detail;
        }
        if (this.status != null) {
            data.status = this.status;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_match)
            writer.writeBool(1, this.match);
        if (this.has_box)
            writer.writeMessage(2, this.box, () => this.box.serialize(writer));
        if (this.has_detail)
            writer.writeString(3, this.detail);
        if (this.has_status)
            writer.writeBool(101, this.status);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SyncContextRunRecognizerResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SyncContextRunRecognizerResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.match = reader.readBool();
                    break;
                case 2:
                    reader.readMessage(message.box, () => message.box = dependency_1.Rect.deserialize(reader));
                    break;
                case 3:
                    message.detail = reader.readString();
                    break;
                case 101:
                    message.status = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SyncContextRunRecognizerResponse {
        return SyncContextRunRecognizerResponse.deserialize(bytes);
    }
}
export class SyncContextRunActionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2], [3], [4], [5]];
    constructor(data?: any[] | ({} & (({
        handle?: dependency_1.Handle;
    }) | ({
        task?: string;
    }) | ({
        param?: string;
    }) | ({
        box?: dependency_1.Rect;
    }) | ({
        detail?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("task" in data && data.task != undefined) {
                this.task = data.task;
            }
            if ("param" in data && data.param != undefined) {
                this.param = data.param;
            }
            if ("box" in data && data.box != undefined) {
                this.box = data.box;
            }
            if ("detail" in data && data.detail != undefined) {
                this.detail = data.detail;
            }
        }
    }
    get handle() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set handle(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_handle() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get task() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set task(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
    }
    get has_task() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get param() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set param(value: string) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
    }
    get has_param() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get box() {
        return pb_1.Message.getWrapperField(this, dependency_1.Rect, 4) as dependency_1.Rect;
    }
    set box(value: dependency_1.Rect) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[3], value);
    }
    get has_box() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get detail() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set detail(value: string) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[4], value);
    }
    get has_detail() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get _handle() {
        const cases: {
            [index: number]: "none" | "handle";
        } = {
            0: "none",
            1: "handle"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _task() {
        const cases: {
            [index: number]: "none" | "task";
        } = {
            0: "none",
            2: "task"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _param() {
        const cases: {
            [index: number]: "none" | "param";
        } = {
            0: "none",
            3: "param"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get _box() {
        const cases: {
            [index: number]: "none" | "box";
        } = {
            0: "none",
            4: "box"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get _detail() {
        const cases: {
            [index: number]: "none" | "detail";
        } = {
            0: "none",
            5: "detail"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    static fromObject(data: {
        handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        task?: string;
        param?: string;
        box?: ReturnType<typeof dependency_1.Rect.prototype.toObject>;
        detail?: string;
    }): SyncContextRunActionRequest {
        const message = new SyncContextRunActionRequest({});
        if (data.handle != null) {
            message.handle = dependency_1.Handle.fromObject(data.handle);
        }
        if (data.task != null) {
            message.task = data.task;
        }
        if (data.param != null) {
            message.param = data.param;
        }
        if (data.box != null) {
            message.box = dependency_1.Rect.fromObject(data.box);
        }
        if (data.detail != null) {
            message.detail = data.detail;
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            task?: string;
            param?: string;
            box?: ReturnType<typeof dependency_1.Rect.prototype.toObject>;
            detail?: string;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle.toObject();
        }
        if (this.task != null) {
            data.task = this.task;
        }
        if (this.param != null) {
            data.param = this.param;
        }
        if (this.box != null) {
            data.box = this.box.toObject();
        }
        if (this.detail != null) {
            data.detail = this.detail;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_handle)
            writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
        if (this.has_task)
            writer.writeString(2, this.task);
        if (this.has_param)
            writer.writeString(3, this.param);
        if (this.has_box)
            writer.writeMessage(4, this.box, () => this.box.serialize(writer));
        if (this.has_detail)
            writer.writeString(5, this.detail);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SyncContextRunActionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SyncContextRunActionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.handle, () => message.handle = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    message.task = reader.readString();
                    break;
                case 3:
                    message.param = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message.box, () => message.box = dependency_1.Rect.deserialize(reader));
                    break;
                case 5:
                    message.detail = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SyncContextRunActionRequest {
        return SyncContextRunActionRequest.deserialize(bytes);
    }
}
export class SyncContextClickRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2]];
    constructor(data?: any[] | ({} & (({
        handle?: dependency_1.Handle;
    }) | ({
        param?: dependency_1.ClickParam;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("param" in data && data.param != undefined) {
                this.param = data.param;
            }
        }
    }
    get handle() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set handle(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_handle() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get param() {
        return pb_1.Message.getWrapperField(this, dependency_1.ClickParam, 2) as dependency_1.ClickParam;
    }
    set param(value: dependency_1.ClickParam) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get has_param() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _handle() {
        const cases: {
            [index: number]: "none" | "handle";
        } = {
            0: "none",
            1: "handle"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _param() {
        const cases: {
            [index: number]: "none" | "param";
        } = {
            0: "none",
            2: "param"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        param?: ReturnType<typeof dependency_1.ClickParam.prototype.toObject>;
    }): SyncContextClickRequest {
        const message = new SyncContextClickRequest({});
        if (data.handle != null) {
            message.handle = dependency_1.Handle.fromObject(data.handle);
        }
        if (data.param != null) {
            message.param = dependency_1.ClickParam.fromObject(data.param);
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            param?: ReturnType<typeof dependency_1.ClickParam.prototype.toObject>;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle.toObject();
        }
        if (this.param != null) {
            data.param = this.param.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_handle)
            writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
        if (this.has_param)
            writer.writeMessage(2, this.param, () => this.param.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SyncContextClickRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SyncContextClickRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.handle, () => message.handle = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.param, () => message.param = dependency_1.ClickParam.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SyncContextClickRequest {
        return SyncContextClickRequest.deserialize(bytes);
    }
}
export class SyncContextSwipeRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2]];
    constructor(data?: any[] | ({} & (({
        handle?: dependency_1.Handle;
    }) | ({
        param?: dependency_1.SwipeParam;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("param" in data && data.param != undefined) {
                this.param = data.param;
            }
        }
    }
    get handle() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set handle(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_handle() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get param() {
        return pb_1.Message.getWrapperField(this, dependency_1.SwipeParam, 2) as dependency_1.SwipeParam;
    }
    set param(value: dependency_1.SwipeParam) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get has_param() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _handle() {
        const cases: {
            [index: number]: "none" | "handle";
        } = {
            0: "none",
            1: "handle"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _param() {
        const cases: {
            [index: number]: "none" | "param";
        } = {
            0: "none",
            2: "param"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        param?: ReturnType<typeof dependency_1.SwipeParam.prototype.toObject>;
    }): SyncContextSwipeRequest {
        const message = new SyncContextSwipeRequest({});
        if (data.handle != null) {
            message.handle = dependency_1.Handle.fromObject(data.handle);
        }
        if (data.param != null) {
            message.param = dependency_1.SwipeParam.fromObject(data.param);
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            param?: ReturnType<typeof dependency_1.SwipeParam.prototype.toObject>;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle.toObject();
        }
        if (this.param != null) {
            data.param = this.param.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_handle)
            writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
        if (this.has_param)
            writer.writeMessage(2, this.param, () => this.param.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SyncContextSwipeRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SyncContextSwipeRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.handle, () => message.handle = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.param, () => message.param = dependency_1.SwipeParam.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SyncContextSwipeRequest {
        return SyncContextSwipeRequest.deserialize(bytes);
    }
}
export class SyncContextKeyRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2]];
    constructor(data?: any[] | ({} & (({
        handle?: dependency_1.Handle;
    }) | ({
        param?: dependency_1.KeyParam;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("param" in data && data.param != undefined) {
                this.param = data.param;
            }
        }
    }
    get handle() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set handle(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_handle() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get param() {
        return pb_1.Message.getWrapperField(this, dependency_1.KeyParam, 2) as dependency_1.KeyParam;
    }
    set param(value: dependency_1.KeyParam) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get has_param() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _handle() {
        const cases: {
            [index: number]: "none" | "handle";
        } = {
            0: "none",
            1: "handle"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _param() {
        const cases: {
            [index: number]: "none" | "param";
        } = {
            0: "none",
            2: "param"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        param?: ReturnType<typeof dependency_1.KeyParam.prototype.toObject>;
    }): SyncContextKeyRequest {
        const message = new SyncContextKeyRequest({});
        if (data.handle != null) {
            message.handle = dependency_1.Handle.fromObject(data.handle);
        }
        if (data.param != null) {
            message.param = dependency_1.KeyParam.fromObject(data.param);
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            param?: ReturnType<typeof dependency_1.KeyParam.prototype.toObject>;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle.toObject();
        }
        if (this.param != null) {
            data.param = this.param.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_handle)
            writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
        if (this.has_param)
            writer.writeMessage(2, this.param, () => this.param.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SyncContextKeyRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SyncContextKeyRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.handle, () => message.handle = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.param, () => message.param = dependency_1.KeyParam.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SyncContextKeyRequest {
        return SyncContextKeyRequest.deserialize(bytes);
    }
}
export class SyncContextTouchRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2]];
    constructor(data?: any[] | ({} & (({
        handle?: dependency_1.Handle;
    }) | ({
        param?: dependency_1.TouchParam;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("param" in data && data.param != undefined) {
                this.param = data.param;
            }
        }
    }
    get handle() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set handle(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_handle() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get param() {
        return pb_1.Message.getWrapperField(this, dependency_1.TouchParam, 2) as dependency_1.TouchParam;
    }
    set param(value: dependency_1.TouchParam) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get has_param() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _handle() {
        const cases: {
            [index: number]: "none" | "handle";
        } = {
            0: "none",
            1: "handle"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _param() {
        const cases: {
            [index: number]: "none" | "param";
        } = {
            0: "none",
            2: "param"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        param?: ReturnType<typeof dependency_1.TouchParam.prototype.toObject>;
    }): SyncContextTouchRequest {
        const message = new SyncContextTouchRequest({});
        if (data.handle != null) {
            message.handle = dependency_1.Handle.fromObject(data.handle);
        }
        if (data.param != null) {
            message.param = dependency_1.TouchParam.fromObject(data.param);
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            param?: ReturnType<typeof dependency_1.TouchParam.prototype.toObject>;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle.toObject();
        }
        if (this.param != null) {
            data.param = this.param.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_handle)
            writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
        if (this.has_param)
            writer.writeMessage(2, this.param, () => this.param.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SyncContextTouchRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SyncContextTouchRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.handle, () => message.handle = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.param, () => message.param = dependency_1.TouchParam.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SyncContextTouchRequest {
        return SyncContextTouchRequest.deserialize(bytes);
    }
}
export class SyncContextScreencapRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2]];
    constructor(data?: any[] | ({} & (({
        handle?: dependency_1.Handle;
    }) | ({
        image?: dependency_1.Handle;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("image" in data && data.image != undefined) {
                this.image = data.image;
            }
        }
    }
    get handle() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 1) as dependency_1.Handle;
    }
    set handle(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get has_handle() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get image() {
        return pb_1.Message.getWrapperField(this, dependency_1.Handle, 2) as dependency_1.Handle;
    }
    set image(value: dependency_1.Handle) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[1], value);
    }
    get has_image() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get _handle() {
        const cases: {
            [index: number]: "none" | "handle";
        } = {
            0: "none",
            1: "handle"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _image() {
        const cases: {
            [index: number]: "none" | "image";
        } = {
            0: "none",
            2: "image"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        image?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
    }): SyncContextScreencapRequest {
        const message = new SyncContextScreencapRequest({});
        if (data.handle != null) {
            message.handle = dependency_1.Handle.fromObject(data.handle);
        }
        if (data.image != null) {
            message.image = dependency_1.Handle.fromObject(data.image);
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
            image?: ReturnType<typeof dependency_1.Handle.prototype.toObject>;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle.toObject();
        }
        if (this.image != null) {
            data.image = this.image.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_handle)
            writer.writeMessage(1, this.handle, () => this.handle.serialize(writer));
        if (this.has_image)
            writer.writeMessage(2, this.image, () => this.image.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SyncContextScreencapRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SyncContextScreencapRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.handle, () => message.handle = dependency_1.Handle.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.image, () => message.image = dependency_1.Handle.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SyncContextScreencapRequest {
        return SyncContextScreencapRequest.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedMaaFrameworkService {
    static definition = {
        version: {
            path: "/maarpc.MaaFramework/version",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.EmptyRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.EmptyRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.StringResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.StringResponse.deserialize(new Uint8Array(bytes))
        },
        set_global_option: {
            path: "/maarpc.MaaFramework/set_global_option",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SetGlobalOptionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SetGlobalOptionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        acquire_callback_id: {
            path: "/maarpc.MaaFramework/acquire_callback_id",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.EmptyRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.EmptyRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.IdResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.IdResponse.deserialize(new Uint8Array(bytes))
        },
        register_callback: {
            path: "/maarpc.MaaFramework/register_callback",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: dependency_1.IdRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.IdRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.Callback) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.Callback.deserialize(new Uint8Array(bytes))
        },
        unregister_callback: {
            path: "/maarpc.MaaFramework/unregister_callback",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.IdRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.IdRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        acquire_custom_controller_id: {
            path: "/maarpc.MaaFramework/acquire_custom_controller_id",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.EmptyRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.EmptyRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.IdResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.IdResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract version(call: grpc_1.ServerUnaryCall<dependency_1.EmptyRequest, dependency_1.StringResponse>, callback: grpc_1.sendUnaryData<dependency_1.StringResponse>): void;
    abstract set_global_option(call: grpc_1.ServerUnaryCall<SetGlobalOptionRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract acquire_callback_id(call: grpc_1.ServerUnaryCall<dependency_1.EmptyRequest, dependency_1.IdResponse>, callback: grpc_1.sendUnaryData<dependency_1.IdResponse>): void;
    abstract register_callback(call: grpc_1.ServerWritableStream<dependency_1.IdRequest, dependency_1.Callback>): void;
    abstract unregister_callback(call: grpc_1.ServerUnaryCall<dependency_1.IdRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract acquire_custom_controller_id(call: grpc_1.ServerUnaryCall<dependency_1.EmptyRequest, dependency_1.IdResponse>, callback: grpc_1.sendUnaryData<dependency_1.IdResponse>): void;
}
export class MaaFrameworkClient extends grpc_1.makeGenericClientConstructor(UnimplementedMaaFrameworkService.definition, "MaaFramework", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    version: GrpcPromiseServiceInterface<dependency_1.EmptyRequest, dependency_1.StringResponse> = (message: dependency_1.EmptyRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.StringResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.version(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.StringResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    set_global_option: GrpcPromiseServiceInterface<SetGlobalOptionRequest, dependency_1.EmptyResponse> = (message: SetGlobalOptionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.set_global_option(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    acquire_callback_id: GrpcPromiseServiceInterface<dependency_1.EmptyRequest, dependency_1.IdResponse> = (message: dependency_1.EmptyRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.IdResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.acquire_callback_id(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.IdResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    register_callback: GrpcStreamServiceInterface<dependency_1.IdRequest, dependency_1.IdRequest> = (message: dependency_1.IdRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<dependency_1.IdRequest> => {
        return super.register_callback(message, metadata, options);
    };
    unregister_callback: GrpcPromiseServiceInterface<dependency_1.IdRequest, dependency_1.EmptyResponse> = (message: dependency_1.IdRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.unregister_callback(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    acquire_custom_controller_id: GrpcPromiseServiceInterface<dependency_1.EmptyRequest, dependency_1.IdResponse> = (message: dependency_1.EmptyRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.IdResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.acquire_custom_controller_id(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.IdResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
export abstract class UnimplementedMaaFrameworkImageService {
    static definition = {
        create: {
            path: "/maarpc.MaaFrameworkImage/create",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.EmptyRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.EmptyRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.HandleResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.HandleResponse.deserialize(new Uint8Array(bytes))
        },
        destroy: {
            path: "/maarpc.MaaFrameworkImage/destroy",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        is_empty: {
            path: "/maarpc.MaaFrameworkImage/is_empty",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.BoolResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.BoolResponse.deserialize(new Uint8Array(bytes))
        },
        clear: {
            path: "/maarpc.MaaFrameworkImage/clear",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        info: {
            path: "/maarpc.MaaFrameworkImage/info",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ImageInfoResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ImageInfoResponse.deserialize(new Uint8Array(bytes))
        },
        encoded: {
            path: "/maarpc.MaaFrameworkImage/encoded",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.BufferResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.BufferResponse.deserialize(new Uint8Array(bytes))
        },
        set_encoded: {
            path: "/maarpc.MaaFrameworkImage/set_encoded",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleBufferRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleBufferRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract create(call: grpc_1.ServerUnaryCall<dependency_1.EmptyRequest, dependency_1.HandleResponse>, callback: grpc_1.sendUnaryData<dependency_1.HandleResponse>): void;
    abstract destroy(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract is_empty(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.BoolResponse>, callback: grpc_1.sendUnaryData<dependency_1.BoolResponse>): void;
    abstract clear(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract info(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, ImageInfoResponse>, callback: grpc_1.sendUnaryData<ImageInfoResponse>): void;
    abstract encoded(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.BufferResponse>, callback: grpc_1.sendUnaryData<dependency_1.BufferResponse>): void;
    abstract set_encoded(call: grpc_1.ServerUnaryCall<dependency_1.HandleBufferRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
}
export class MaaFrameworkImageClient extends grpc_1.makeGenericClientConstructor(UnimplementedMaaFrameworkImageService.definition, "MaaFrameworkImage", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    create: GrpcPromiseServiceInterface<dependency_1.EmptyRequest, dependency_1.HandleResponse> = (message: dependency_1.EmptyRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.HandleResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.create(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.HandleResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    destroy: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.destroy(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    is_empty: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.BoolResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.BoolResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.is_empty(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.BoolResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    clear: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.clear(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    info: GrpcPromiseServiceInterface<dependency_1.HandleRequest, ImageInfoResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<ImageInfoResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.info(message, metadata, options, (error: grpc_1.ServiceError, response: ImageInfoResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    encoded: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.BufferResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.BufferResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.encoded(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.BufferResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    set_encoded: GrpcPromiseServiceInterface<dependency_1.HandleBufferRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleBufferRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.set_encoded(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
export abstract class UnimplementedMaaFrameworkResourceService {
    static definition = {
        create: {
            path: "/maarpc.MaaFrameworkResource/create",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.IdRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.IdRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.HandleResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.HandleResponse.deserialize(new Uint8Array(bytes))
        },
        destroy: {
            path: "/maarpc.MaaFrameworkResource/destroy",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        post_path: {
            path: "/maarpc.MaaFrameworkResource/post_path",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleStringRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleStringRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.IdResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.IdResponse.deserialize(new Uint8Array(bytes))
        },
        status: {
            path: "/maarpc.MaaFrameworkResource/status",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleIdRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleIdRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.StatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.StatusResponse.deserialize(new Uint8Array(bytes))
        },
        wait: {
            path: "/maarpc.MaaFrameworkResource/wait",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleIdRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleIdRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.StatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.StatusResponse.deserialize(new Uint8Array(bytes))
        },
        loaded: {
            path: "/maarpc.MaaFrameworkResource/loaded",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.BoolResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.BoolResponse.deserialize(new Uint8Array(bytes))
        },
        hash: {
            path: "/maarpc.MaaFrameworkResource/hash",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.StringResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.StringResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract create(call: grpc_1.ServerUnaryCall<dependency_1.IdRequest, dependency_1.HandleResponse>, callback: grpc_1.sendUnaryData<dependency_1.HandleResponse>): void;
    abstract destroy(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract post_path(call: grpc_1.ServerUnaryCall<dependency_1.HandleStringRequest, dependency_1.IdResponse>, callback: grpc_1.sendUnaryData<dependency_1.IdResponse>): void;
    abstract status(call: grpc_1.ServerUnaryCall<dependency_1.HandleIdRequest, dependency_1.StatusResponse>, callback: grpc_1.sendUnaryData<dependency_1.StatusResponse>): void;
    abstract wait(call: grpc_1.ServerUnaryCall<dependency_1.HandleIdRequest, dependency_1.StatusResponse>, callback: grpc_1.sendUnaryData<dependency_1.StatusResponse>): void;
    abstract loaded(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.BoolResponse>, callback: grpc_1.sendUnaryData<dependency_1.BoolResponse>): void;
    abstract hash(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.StringResponse>, callback: grpc_1.sendUnaryData<dependency_1.StringResponse>): void;
}
export class MaaFrameworkResourceClient extends grpc_1.makeGenericClientConstructor(UnimplementedMaaFrameworkResourceService.definition, "MaaFrameworkResource", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    create: GrpcPromiseServiceInterface<dependency_1.IdRequest, dependency_1.HandleResponse> = (message: dependency_1.IdRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.HandleResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.create(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.HandleResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    destroy: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.destroy(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    post_path: GrpcPromiseServiceInterface<dependency_1.HandleStringRequest, dependency_1.IdResponse> = (message: dependency_1.HandleStringRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.IdResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.post_path(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.IdResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    status: GrpcPromiseServiceInterface<dependency_1.HandleIdRequest, dependency_1.StatusResponse> = (message: dependency_1.HandleIdRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.StatusResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.status(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.StatusResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    wait: GrpcPromiseServiceInterface<dependency_1.HandleIdRequest, dependency_1.StatusResponse> = (message: dependency_1.HandleIdRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.StatusResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.wait(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.StatusResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    loaded: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.BoolResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.BoolResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.loaded(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.BoolResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    hash: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.StringResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.StringResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.hash(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.StringResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
export abstract class UnimplementedMaaFrameworkControllerService {
    static definition = {
        create_adb: {
            path: "/maarpc.MaaFrameworkController/create_adb",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: AdbControllerRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => AdbControllerRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.HandleResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.HandleResponse.deserialize(new Uint8Array(bytes))
        },
        destroy: {
            path: "/maarpc.MaaFrameworkController/destroy",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        create_custom: {
            path: "/maarpc.MaaFrameworkController/create_custom",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: CustomControllerRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CustomControllerRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CustomControllerResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CustomControllerResponse.deserialize(new Uint8Array(bytes))
        },
        submit_custom_controller: {
            path: "/maarpc.MaaFrameworkController/submit_custom_controller",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SubmitCustomControllerRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SubmitCustomControllerRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        set_option: {
            path: "/maarpc.MaaFrameworkController/set_option",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ControllerSetOptionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ControllerSetOptionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        post_connection: {
            path: "/maarpc.MaaFrameworkController/post_connection",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.IdResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.IdResponse.deserialize(new Uint8Array(bytes))
        },
        post_click: {
            path: "/maarpc.MaaFrameworkController/post_click",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ControllerPostClickRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ControllerPostClickRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.IdResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.IdResponse.deserialize(new Uint8Array(bytes))
        },
        post_swipe: {
            path: "/maarpc.MaaFrameworkController/post_swipe",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ControllerPostSwipeRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ControllerPostSwipeRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.IdResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.IdResponse.deserialize(new Uint8Array(bytes))
        },
        post_press_key: {
            path: "/maarpc.MaaFrameworkController/post_press_key",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ControllerPostKeyRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ControllerPostKeyRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.IdResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.IdResponse.deserialize(new Uint8Array(bytes))
        },
        post_touch_down: {
            path: "/maarpc.MaaFrameworkController/post_touch_down",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ControllerPostTouchRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ControllerPostTouchRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.IdResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.IdResponse.deserialize(new Uint8Array(bytes))
        },
        post_touch_move: {
            path: "/maarpc.MaaFrameworkController/post_touch_move",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ControllerPostTouchRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ControllerPostTouchRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.IdResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.IdResponse.deserialize(new Uint8Array(bytes))
        },
        post_touch_up: {
            path: "/maarpc.MaaFrameworkController/post_touch_up",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ControllerPostTouchRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ControllerPostTouchRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.IdResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.IdResponse.deserialize(new Uint8Array(bytes))
        },
        post_screencap: {
            path: "/maarpc.MaaFrameworkController/post_screencap",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.IdResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.IdResponse.deserialize(new Uint8Array(bytes))
        },
        status: {
            path: "/maarpc.MaaFrameworkController/status",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleIdRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleIdRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.StatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.StatusResponse.deserialize(new Uint8Array(bytes))
        },
        wait: {
            path: "/maarpc.MaaFrameworkController/wait",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleIdRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleIdRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        connected: {
            path: "/maarpc.MaaFrameworkController/connected",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.BoolResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.BoolResponse.deserialize(new Uint8Array(bytes))
        },
        image: {
            path: "/maarpc.MaaFrameworkController/image",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ControllerGetImageRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ControllerGetImageRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        uuid: {
            path: "/maarpc.MaaFrameworkController/uuid",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.StringResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.StringResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract create_adb(call: grpc_1.ServerUnaryCall<AdbControllerRequest, dependency_1.HandleResponse>, callback: grpc_1.sendUnaryData<dependency_1.HandleResponse>): void;
    abstract destroy(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract create_custom(call: grpc_1.ServerWritableStream<CustomControllerRequest, CustomControllerResponse>): void;
    abstract submit_custom_controller(call: grpc_1.ServerUnaryCall<SubmitCustomControllerRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract set_option(call: grpc_1.ServerUnaryCall<ControllerSetOptionRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract post_connection(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.IdResponse>, callback: grpc_1.sendUnaryData<dependency_1.IdResponse>): void;
    abstract post_click(call: grpc_1.ServerUnaryCall<ControllerPostClickRequest, dependency_1.IdResponse>, callback: grpc_1.sendUnaryData<dependency_1.IdResponse>): void;
    abstract post_swipe(call: grpc_1.ServerUnaryCall<ControllerPostSwipeRequest, dependency_1.IdResponse>, callback: grpc_1.sendUnaryData<dependency_1.IdResponse>): void;
    abstract post_press_key(call: grpc_1.ServerUnaryCall<ControllerPostKeyRequest, dependency_1.IdResponse>, callback: grpc_1.sendUnaryData<dependency_1.IdResponse>): void;
    abstract post_touch_down(call: grpc_1.ServerUnaryCall<ControllerPostTouchRequest, dependency_1.IdResponse>, callback: grpc_1.sendUnaryData<dependency_1.IdResponse>): void;
    abstract post_touch_move(call: grpc_1.ServerUnaryCall<ControllerPostTouchRequest, dependency_1.IdResponse>, callback: grpc_1.sendUnaryData<dependency_1.IdResponse>): void;
    abstract post_touch_up(call: grpc_1.ServerUnaryCall<ControllerPostTouchRequest, dependency_1.IdResponse>, callback: grpc_1.sendUnaryData<dependency_1.IdResponse>): void;
    abstract post_screencap(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.IdResponse>, callback: grpc_1.sendUnaryData<dependency_1.IdResponse>): void;
    abstract status(call: grpc_1.ServerUnaryCall<dependency_1.HandleIdRequest, dependency_1.StatusResponse>, callback: grpc_1.sendUnaryData<dependency_1.StatusResponse>): void;
    abstract wait(call: grpc_1.ServerUnaryCall<dependency_1.HandleIdRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract connected(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.BoolResponse>, callback: grpc_1.sendUnaryData<dependency_1.BoolResponse>): void;
    abstract image(call: grpc_1.ServerUnaryCall<ControllerGetImageRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract uuid(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.StringResponse>, callback: grpc_1.sendUnaryData<dependency_1.StringResponse>): void;
}
export class MaaFrameworkControllerClient extends grpc_1.makeGenericClientConstructor(UnimplementedMaaFrameworkControllerService.definition, "MaaFrameworkController", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    create_adb: GrpcPromiseServiceInterface<AdbControllerRequest, dependency_1.HandleResponse> = (message: AdbControllerRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.HandleResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.create_adb(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.HandleResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    destroy: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.destroy(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    create_custom: GrpcStreamServiceInterface<CustomControllerRequest, CustomControllerRequest> = (message: CustomControllerRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<CustomControllerRequest> => {
        return super.create_custom(message, metadata, options);
    };
    submit_custom_controller: GrpcPromiseServiceInterface<SubmitCustomControllerRequest, dependency_1.EmptyResponse> = (message: SubmitCustomControllerRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.submit_custom_controller(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    set_option: GrpcPromiseServiceInterface<ControllerSetOptionRequest, dependency_1.EmptyResponse> = (message: ControllerSetOptionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.set_option(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    post_connection: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.IdResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.IdResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.post_connection(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.IdResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    post_click: GrpcPromiseServiceInterface<ControllerPostClickRequest, dependency_1.IdResponse> = (message: ControllerPostClickRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.IdResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.post_click(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.IdResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    post_swipe: GrpcPromiseServiceInterface<ControllerPostSwipeRequest, dependency_1.IdResponse> = (message: ControllerPostSwipeRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.IdResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.post_swipe(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.IdResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    post_press_key: GrpcPromiseServiceInterface<ControllerPostKeyRequest, dependency_1.IdResponse> = (message: ControllerPostKeyRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.IdResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.post_press_key(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.IdResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    post_touch_down: GrpcPromiseServiceInterface<ControllerPostTouchRequest, dependency_1.IdResponse> = (message: ControllerPostTouchRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.IdResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.post_touch_down(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.IdResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    post_touch_move: GrpcPromiseServiceInterface<ControllerPostTouchRequest, dependency_1.IdResponse> = (message: ControllerPostTouchRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.IdResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.post_touch_move(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.IdResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    post_touch_up: GrpcPromiseServiceInterface<ControllerPostTouchRequest, dependency_1.IdResponse> = (message: ControllerPostTouchRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.IdResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.post_touch_up(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.IdResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    post_screencap: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.IdResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.IdResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.post_screencap(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.IdResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    status: GrpcPromiseServiceInterface<dependency_1.HandleIdRequest, dependency_1.StatusResponse> = (message: dependency_1.HandleIdRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.StatusResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.status(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.StatusResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    wait: GrpcPromiseServiceInterface<dependency_1.HandleIdRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleIdRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.wait(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    connected: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.BoolResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.BoolResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.connected(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.BoolResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    image: GrpcPromiseServiceInterface<ControllerGetImageRequest, dependency_1.EmptyResponse> = (message: ControllerGetImageRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.image(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    uuid: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.StringResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.StringResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.uuid(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.StringResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
export abstract class UnimplementedMaaFrameworkInstanceService {
    static definition = {
        create: {
            path: "/maarpc.MaaFrameworkInstance/create",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.IdRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.IdRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.HandleResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.HandleResponse.deserialize(new Uint8Array(bytes))
        },
        destroy: {
            path: "/maarpc.MaaFrameworkInstance/destroy",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        register_custom_recognizer: {
            path: "/maarpc.MaaFrameworkInstance/register_custom_recognizer",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: CustomRecognizerRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CustomRecognizerRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CustomRecognizerResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CustomRecognizerResponse.deserialize(new Uint8Array(bytes))
        },
        submit_custom_recognizer: {
            path: "/maarpc.MaaFrameworkInstance/submit_custom_recognizer",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SubmitCustomRecognizerRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SubmitCustomRecognizerRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        unregister_custom_recognizer: {
            path: "/maarpc.MaaFrameworkInstance/unregister_custom_recognizer",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleStringRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleStringRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        clear_custom_recognizer: {
            path: "/maarpc.MaaFrameworkInstance/clear_custom_recognizer",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        register_custom_action: {
            path: "/maarpc.MaaFrameworkInstance/register_custom_action",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: CustomRecognizerRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CustomRecognizerRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CustomRecognizerResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CustomRecognizerResponse.deserialize(new Uint8Array(bytes))
        },
        submit_custom_action: {
            path: "/maarpc.MaaFrameworkInstance/submit_custom_action",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SubmitCustomRecognizerRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SubmitCustomRecognizerRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        unregister_custom_action: {
            path: "/maarpc.MaaFrameworkInstance/unregister_custom_action",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleStringRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleStringRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        clear_custom_action: {
            path: "/maarpc.MaaFrameworkInstance/clear_custom_action",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        bind_resource: {
            path: "/maarpc.MaaFrameworkInstance/bind_resource",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        bind_controller: {
            path: "/maarpc.MaaFrameworkInstance/bind_controller",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        inited: {
            path: "/maarpc.MaaFrameworkInstance/inited",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.BoolResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.BoolResponse.deserialize(new Uint8Array(bytes))
        },
        post_task: {
            path: "/maarpc.MaaFrameworkInstance/post_task",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: InstancePostTaskRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => InstancePostTaskRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.IdResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.IdResponse.deserialize(new Uint8Array(bytes))
        },
        set_task_param: {
            path: "/maarpc.MaaFrameworkInstance/set_task_param",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: InstanceSetTaskParamRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => InstanceSetTaskParamRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        status: {
            path: "/maarpc.MaaFrameworkInstance/status",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleIdRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleIdRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.StatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.StatusResponse.deserialize(new Uint8Array(bytes))
        },
        wait: {
            path: "/maarpc.MaaFrameworkInstance/wait",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleIdRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleIdRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        all_finished: {
            path: "/maarpc.MaaFrameworkInstance/all_finished",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.BoolResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.BoolResponse.deserialize(new Uint8Array(bytes))
        },
        stop: {
            path: "/maarpc.MaaFrameworkInstance/stop",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        resource: {
            path: "/maarpc.MaaFrameworkInstance/resource",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes))
        },
        controller: {
            path: "/maarpc.MaaFrameworkInstance/controller",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract create(call: grpc_1.ServerUnaryCall<dependency_1.IdRequest, dependency_1.HandleResponse>, callback: grpc_1.sendUnaryData<dependency_1.HandleResponse>): void;
    abstract destroy(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract register_custom_recognizer(call: grpc_1.ServerWritableStream<CustomRecognizerRequest, CustomRecognizerResponse>): void;
    abstract submit_custom_recognizer(call: grpc_1.ServerUnaryCall<SubmitCustomRecognizerRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract unregister_custom_recognizer(call: grpc_1.ServerUnaryCall<dependency_1.HandleStringRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract clear_custom_recognizer(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract register_custom_action(call: grpc_1.ServerWritableStream<CustomRecognizerRequest, CustomRecognizerResponse>): void;
    abstract submit_custom_action(call: grpc_1.ServerUnaryCall<SubmitCustomRecognizerRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract unregister_custom_action(call: grpc_1.ServerUnaryCall<dependency_1.HandleStringRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract clear_custom_action(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract bind_resource(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract bind_controller(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract inited(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.BoolResponse>, callback: grpc_1.sendUnaryData<dependency_1.BoolResponse>): void;
    abstract post_task(call: grpc_1.ServerUnaryCall<InstancePostTaskRequest, dependency_1.IdResponse>, callback: grpc_1.sendUnaryData<dependency_1.IdResponse>): void;
    abstract set_task_param(call: grpc_1.ServerUnaryCall<InstanceSetTaskParamRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract status(call: grpc_1.ServerUnaryCall<dependency_1.HandleIdRequest, dependency_1.StatusResponse>, callback: grpc_1.sendUnaryData<dependency_1.StatusResponse>): void;
    abstract wait(call: grpc_1.ServerUnaryCall<dependency_1.HandleIdRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract all_finished(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.BoolResponse>, callback: grpc_1.sendUnaryData<dependency_1.BoolResponse>): void;
    abstract stop(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract resource(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.HandleRequest>, callback: grpc_1.sendUnaryData<dependency_1.HandleRequest>): void;
    abstract controller(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.HandleRequest>, callback: grpc_1.sendUnaryData<dependency_1.HandleRequest>): void;
}
export class MaaFrameworkInstanceClient extends grpc_1.makeGenericClientConstructor(UnimplementedMaaFrameworkInstanceService.definition, "MaaFrameworkInstance", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    create: GrpcPromiseServiceInterface<dependency_1.IdRequest, dependency_1.HandleResponse> = (message: dependency_1.IdRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.HandleResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.create(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.HandleResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    destroy: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.destroy(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    register_custom_recognizer: GrpcStreamServiceInterface<CustomRecognizerRequest, CustomRecognizerRequest> = (message: CustomRecognizerRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<CustomRecognizerRequest> => {
        return super.register_custom_recognizer(message, metadata, options);
    };
    submit_custom_recognizer: GrpcPromiseServiceInterface<SubmitCustomRecognizerRequest, dependency_1.EmptyResponse> = (message: SubmitCustomRecognizerRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.submit_custom_recognizer(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    unregister_custom_recognizer: GrpcPromiseServiceInterface<dependency_1.HandleStringRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleStringRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.unregister_custom_recognizer(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    clear_custom_recognizer: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.clear_custom_recognizer(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    register_custom_action: GrpcStreamServiceInterface<CustomRecognizerRequest, CustomRecognizerRequest> = (message: CustomRecognizerRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<CustomRecognizerRequest> => {
        return super.register_custom_action(message, metadata, options);
    };
    submit_custom_action: GrpcPromiseServiceInterface<SubmitCustomRecognizerRequest, dependency_1.EmptyResponse> = (message: SubmitCustomRecognizerRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.submit_custom_action(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    unregister_custom_action: GrpcPromiseServiceInterface<dependency_1.HandleStringRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleStringRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.unregister_custom_action(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    clear_custom_action: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.clear_custom_action(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    bind_resource: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.bind_resource(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    bind_controller: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.bind_controller(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    inited: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.BoolResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.BoolResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.inited(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.BoolResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    post_task: GrpcPromiseServiceInterface<InstancePostTaskRequest, dependency_1.IdResponse> = (message: InstancePostTaskRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.IdResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.post_task(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.IdResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    set_task_param: GrpcPromiseServiceInterface<InstanceSetTaskParamRequest, dependency_1.EmptyResponse> = (message: InstanceSetTaskParamRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.set_task_param(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    status: GrpcPromiseServiceInterface<dependency_1.HandleIdRequest, dependency_1.StatusResponse> = (message: dependency_1.HandleIdRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.StatusResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.status(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.StatusResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    wait: GrpcPromiseServiceInterface<dependency_1.HandleIdRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleIdRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.wait(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    all_finished: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.BoolResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.BoolResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.all_finished(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.BoolResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    stop: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.stop(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    resource: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.HandleRequest> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.HandleRequest> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.resource(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.HandleRequest) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    controller: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.HandleRequest> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.HandleRequest> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.controller(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.HandleRequest) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
export abstract class UnimplementedMaaFrameworkSyncContextService {
    static definition = {
        run_task: {
            path: "/maarpc.MaaFrameworkSyncContext/run_task",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SyncContextRunTaskRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SyncContextRunTaskRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        run_recognizer: {
            path: "/maarpc.MaaFrameworkSyncContext/run_recognizer",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SyncContextRunRecognizerRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SyncContextRunRecognizerRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: SyncContextRunRecognizerResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => SyncContextRunRecognizerResponse.deserialize(new Uint8Array(bytes))
        },
        run_action: {
            path: "/maarpc.MaaFrameworkSyncContext/run_action",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SyncContextRunActionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SyncContextRunActionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        click: {
            path: "/maarpc.MaaFrameworkSyncContext/click",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SyncContextClickRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SyncContextClickRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyRequest) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyRequest.deserialize(new Uint8Array(bytes))
        },
        swipe: {
            path: "/maarpc.MaaFrameworkSyncContext/swipe",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SyncContextSwipeRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SyncContextSwipeRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyRequest) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyRequest.deserialize(new Uint8Array(bytes))
        },
        key: {
            path: "/maarpc.MaaFrameworkSyncContext/key",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SyncContextKeyRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SyncContextKeyRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyRequest) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyRequest.deserialize(new Uint8Array(bytes))
        },
        touch_down: {
            path: "/maarpc.MaaFrameworkSyncContext/touch_down",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SyncContextTouchRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SyncContextTouchRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyRequest) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyRequest.deserialize(new Uint8Array(bytes))
        },
        touch_move: {
            path: "/maarpc.MaaFrameworkSyncContext/touch_move",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SyncContextTouchRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SyncContextTouchRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyRequest) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyRequest.deserialize(new Uint8Array(bytes))
        },
        touch_up: {
            path: "/maarpc.MaaFrameworkSyncContext/touch_up",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SyncContextTouchRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SyncContextTouchRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyRequest) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyRequest.deserialize(new Uint8Array(bytes))
        },
        screencap: {
            path: "/maarpc.MaaFrameworkSyncContext/screencap",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SyncContextScreencapRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SyncContextScreencapRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        task_result: {
            path: "/maarpc.MaaFrameworkSyncContext/task_result",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleStringRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleStringRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.StringResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.StringResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract run_task(call: grpc_1.ServerUnaryCall<SyncContextRunTaskRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract run_recognizer(call: grpc_1.ServerUnaryCall<SyncContextRunRecognizerRequest, SyncContextRunRecognizerResponse>, callback: grpc_1.sendUnaryData<SyncContextRunRecognizerResponse>): void;
    abstract run_action(call: grpc_1.ServerUnaryCall<SyncContextRunActionRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract click(call: grpc_1.ServerUnaryCall<SyncContextClickRequest, dependency_1.EmptyRequest>, callback: grpc_1.sendUnaryData<dependency_1.EmptyRequest>): void;
    abstract swipe(call: grpc_1.ServerUnaryCall<SyncContextSwipeRequest, dependency_1.EmptyRequest>, callback: grpc_1.sendUnaryData<dependency_1.EmptyRequest>): void;
    abstract key(call: grpc_1.ServerUnaryCall<SyncContextKeyRequest, dependency_1.EmptyRequest>, callback: grpc_1.sendUnaryData<dependency_1.EmptyRequest>): void;
    abstract touch_down(call: grpc_1.ServerUnaryCall<SyncContextTouchRequest, dependency_1.EmptyRequest>, callback: grpc_1.sendUnaryData<dependency_1.EmptyRequest>): void;
    abstract touch_move(call: grpc_1.ServerUnaryCall<SyncContextTouchRequest, dependency_1.EmptyRequest>, callback: grpc_1.sendUnaryData<dependency_1.EmptyRequest>): void;
    abstract touch_up(call: grpc_1.ServerUnaryCall<SyncContextTouchRequest, dependency_1.EmptyRequest>, callback: grpc_1.sendUnaryData<dependency_1.EmptyRequest>): void;
    abstract screencap(call: grpc_1.ServerUnaryCall<SyncContextScreencapRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract task_result(call: grpc_1.ServerUnaryCall<dependency_1.HandleStringRequest, dependency_1.StringResponse>, callback: grpc_1.sendUnaryData<dependency_1.StringResponse>): void;
}
export class MaaFrameworkSyncContextClient extends grpc_1.makeGenericClientConstructor(UnimplementedMaaFrameworkSyncContextService.definition, "MaaFrameworkSyncContext", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    run_task: GrpcPromiseServiceInterface<SyncContextRunTaskRequest, dependency_1.EmptyResponse> = (message: SyncContextRunTaskRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.run_task(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    run_recognizer: GrpcPromiseServiceInterface<SyncContextRunRecognizerRequest, SyncContextRunRecognizerResponse> = (message: SyncContextRunRecognizerRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<SyncContextRunRecognizerResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.run_recognizer(message, metadata, options, (error: grpc_1.ServiceError, response: SyncContextRunRecognizerResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    run_action: GrpcPromiseServiceInterface<SyncContextRunActionRequest, dependency_1.EmptyResponse> = (message: SyncContextRunActionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.run_action(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    click: GrpcPromiseServiceInterface<SyncContextClickRequest, dependency_1.EmptyRequest> = (message: SyncContextClickRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyRequest> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.click(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyRequest) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    swipe: GrpcPromiseServiceInterface<SyncContextSwipeRequest, dependency_1.EmptyRequest> = (message: SyncContextSwipeRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyRequest> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.swipe(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyRequest) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    key: GrpcPromiseServiceInterface<SyncContextKeyRequest, dependency_1.EmptyRequest> = (message: SyncContextKeyRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyRequest> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.key(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyRequest) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    touch_down: GrpcPromiseServiceInterface<SyncContextTouchRequest, dependency_1.EmptyRequest> = (message: SyncContextTouchRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyRequest> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.touch_down(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyRequest) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    touch_move: GrpcPromiseServiceInterface<SyncContextTouchRequest, dependency_1.EmptyRequest> = (message: SyncContextTouchRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyRequest> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.touch_move(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyRequest) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    touch_up: GrpcPromiseServiceInterface<SyncContextTouchRequest, dependency_1.EmptyRequest> = (message: SyncContextTouchRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyRequest> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.touch_up(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyRequest) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    screencap: GrpcPromiseServiceInterface<SyncContextScreencapRequest, dependency_1.EmptyResponse> = (message: SyncContextScreencapRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.screencap(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    task_result: GrpcPromiseServiceInterface<dependency_1.HandleStringRequest, dependency_1.StringResponse> = (message: dependency_1.HandleStringRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.StringResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.task_result(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.StringResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}

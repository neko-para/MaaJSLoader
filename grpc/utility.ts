/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: utility.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./types";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class SetGlobalOptionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1, 2]];
    constructor(data?: any[] | ({} & (({
        logging?: string;
        debug_mode?: never;
    } | {
        logging?: never;
        debug_mode?: boolean;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("logging" in data && data.logging != undefined) {
                this.logging = data.logging;
            }
            if ("debug_mode" in data && data.debug_mode != undefined) {
                this.debug_mode = data.debug_mode;
            }
        }
    }
    get logging() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set logging(value: string) {
        pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get has_logging() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get debug_mode() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set debug_mode(value: boolean) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get has_debug_mode() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get option() {
        const cases: {
            [index: number]: "none" | "logging" | "debug_mode";
        } = {
            0: "none",
            1: "logging",
            2: "debug_mode"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data: {
        logging?: string;
        debug_mode?: boolean;
    }): SetGlobalOptionRequest {
        const message = new SetGlobalOptionRequest({});
        if (data.logging != null) {
            message.logging = data.logging;
        }
        if (data.debug_mode != null) {
            message.debug_mode = data.debug_mode;
        }
        return message;
    }
    toObject() {
        const data: {
            logging?: string;
            debug_mode?: boolean;
        } = {};
        if (this.logging != null) {
            data.logging = this.logging;
        }
        if (this.debug_mode != null) {
            data.debug_mode = this.debug_mode;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_logging)
            writer.writeString(1, this.logging);
        if (this.has_debug_mode)
            writer.writeBool(2, this.debug_mode);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetGlobalOptionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetGlobalOptionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.logging = reader.readString();
                    break;
                case 2:
                    message.debug_mode = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SetGlobalOptionRequest {
        return SetGlobalOptionRequest.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedUtilityService {
    static definition = {
        version: {
            path: "/maarpc.Utility/version",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.EmptyRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.EmptyRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.StringResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.StringResponse.deserialize(new Uint8Array(bytes))
        },
        set_global_option: {
            path: "/maarpc.Utility/set_global_option",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: SetGlobalOptionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => SetGlobalOptionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        acquire_callback_id: {
            path: "/maarpc.Utility/acquire_callback_id",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.EmptyRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.EmptyRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.IdResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.IdResponse.deserialize(new Uint8Array(bytes))
        },
        register_callback: {
            path: "/maarpc.Utility/register_callback",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: dependency_1.IdRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.IdRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.Callback) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.Callback.deserialize(new Uint8Array(bytes))
        },
        unregister_callback: {
            path: "/maarpc.Utility/unregister_callback",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.IdRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.IdRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        acquire_custom_controller_id: {
            path: "/maarpc.Utility/acquire_custom_controller_id",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.EmptyRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.EmptyRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.IdResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.IdResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract version(call: grpc_1.ServerUnaryCall<dependency_1.EmptyRequest, dependency_1.StringResponse>, callback: grpc_1.sendUnaryData<dependency_1.StringResponse>): void;
    abstract set_global_option(call: grpc_1.ServerUnaryCall<SetGlobalOptionRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract acquire_callback_id(call: grpc_1.ServerUnaryCall<dependency_1.EmptyRequest, dependency_1.IdResponse>, callback: grpc_1.sendUnaryData<dependency_1.IdResponse>): void;
    abstract register_callback(call: grpc_1.ServerWritableStream<dependency_1.IdRequest, dependency_1.Callback>): void;
    abstract unregister_callback(call: grpc_1.ServerUnaryCall<dependency_1.IdRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract acquire_custom_controller_id(call: grpc_1.ServerUnaryCall<dependency_1.EmptyRequest, dependency_1.IdResponse>, callback: grpc_1.sendUnaryData<dependency_1.IdResponse>): void;
}
export class UtilityClient extends grpc_1.makeGenericClientConstructor(UnimplementedUtilityService.definition, "Utility", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    version: GrpcPromiseServiceInterface<dependency_1.EmptyRequest, dependency_1.StringResponse> = (message: dependency_1.EmptyRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.StringResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.version(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.StringResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    set_global_option: GrpcPromiseServiceInterface<SetGlobalOptionRequest, dependency_1.EmptyResponse> = (message: SetGlobalOptionRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.set_global_option(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    acquire_callback_id: GrpcPromiseServiceInterface<dependency_1.EmptyRequest, dependency_1.IdResponse> = (message: dependency_1.EmptyRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.IdResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.acquire_callback_id(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.IdResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    register_callback: GrpcStreamServiceInterface<dependency_1.IdRequest, dependency_1.IdRequest> = (message: dependency_1.IdRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<dependency_1.IdRequest> => {
        return super.register_callback(message, metadata, options);
    };
    unregister_callback: GrpcPromiseServiceInterface<dependency_1.IdRequest, dependency_1.EmptyResponse> = (message: dependency_1.IdRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.unregister_callback(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    acquire_custom_controller_id: GrpcPromiseServiceInterface<dependency_1.EmptyRequest, dependency_1.IdResponse> = (message: dependency_1.EmptyRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.IdResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.acquire_custom_controller_id(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.IdResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}

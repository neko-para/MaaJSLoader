/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: resource.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./types";
import * as grpc_1 from "@grpc/grpc-js";
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedResourceService {
    static definition = {
        create: {
            path: "/maarpc.Resource/create",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.IdRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.IdRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.HandleResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.HandleResponse.deserialize(new Uint8Array(bytes))
        },
        destroy: {
            path: "/maarpc.Resource/destroy",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.EmptyResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.EmptyResponse.deserialize(new Uint8Array(bytes))
        },
        post_path: {
            path: "/maarpc.Resource/post_path",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleStringRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleStringRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.IdResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.IdResponse.deserialize(new Uint8Array(bytes))
        },
        status: {
            path: "/maarpc.Resource/status",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleIdRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleIdRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.StatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.StatusResponse.deserialize(new Uint8Array(bytes))
        },
        wait: {
            path: "/maarpc.Resource/wait",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleIdRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleIdRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.StatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.StatusResponse.deserialize(new Uint8Array(bytes))
        },
        loaded: {
            path: "/maarpc.Resource/loaded",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.BoolResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.BoolResponse.deserialize(new Uint8Array(bytes))
        },
        hash: {
            path: "/maarpc.Resource/hash",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: dependency_1.HandleRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => dependency_1.HandleRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: dependency_1.StringResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => dependency_1.StringResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract create(call: grpc_1.ServerUnaryCall<dependency_1.IdRequest, dependency_1.HandleResponse>, callback: grpc_1.sendUnaryData<dependency_1.HandleResponse>): void;
    abstract destroy(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.EmptyResponse>, callback: grpc_1.sendUnaryData<dependency_1.EmptyResponse>): void;
    abstract post_path(call: grpc_1.ServerUnaryCall<dependency_1.HandleStringRequest, dependency_1.IdResponse>, callback: grpc_1.sendUnaryData<dependency_1.IdResponse>): void;
    abstract status(call: grpc_1.ServerUnaryCall<dependency_1.HandleIdRequest, dependency_1.StatusResponse>, callback: grpc_1.sendUnaryData<dependency_1.StatusResponse>): void;
    abstract wait(call: grpc_1.ServerUnaryCall<dependency_1.HandleIdRequest, dependency_1.StatusResponse>, callback: grpc_1.sendUnaryData<dependency_1.StatusResponse>): void;
    abstract loaded(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.BoolResponse>, callback: grpc_1.sendUnaryData<dependency_1.BoolResponse>): void;
    abstract hash(call: grpc_1.ServerUnaryCall<dependency_1.HandleRequest, dependency_1.StringResponse>, callback: grpc_1.sendUnaryData<dependency_1.StringResponse>): void;
}
export class ResourceClient extends grpc_1.makeGenericClientConstructor(UnimplementedResourceService.definition, "Resource", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    create: GrpcPromiseServiceInterface<dependency_1.IdRequest, dependency_1.HandleResponse> = (message: dependency_1.IdRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.HandleResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.create(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.HandleResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    destroy: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.EmptyResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.EmptyResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.destroy(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.EmptyResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    post_path: GrpcPromiseServiceInterface<dependency_1.HandleStringRequest, dependency_1.IdResponse> = (message: dependency_1.HandleStringRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.IdResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.post_path(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.IdResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    status: GrpcPromiseServiceInterface<dependency_1.HandleIdRequest, dependency_1.StatusResponse> = (message: dependency_1.HandleIdRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.StatusResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.status(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.StatusResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    wait: GrpcPromiseServiceInterface<dependency_1.HandleIdRequest, dependency_1.StatusResponse> = (message: dependency_1.HandleIdRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.StatusResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.wait(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.StatusResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    loaded: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.BoolResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.BoolResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.loaded(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.BoolResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    hash: GrpcPromiseServiceInterface<dependency_1.HandleRequest, dependency_1.StringResponse> = (message: dependency_1.HandleRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<dependency_1.StringResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.hash(message, metadata, options, (error: grpc_1.ServiceError, response: dependency_1.StringResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
